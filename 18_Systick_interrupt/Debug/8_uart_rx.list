
8_uart_rx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002b8  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000450  08000458  00010458  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000450  08000450  00010458  2**0
                  CONTENTS
  4 .ARM          00000000  08000450  08000450  00010458  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000450  08000458  00010458  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000450  08000450  00010450  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000454  08000454  00010454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010458  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000458  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000458  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010458  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010488  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000783  00000000  00000000  000104cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000026c  00000000  00000000  00010c4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000090  00000000  00000000  00010ec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000005e  00000000  00000000  00010f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000dd72  00000000  00000000  00010fae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000c43  00000000  00000000  0001ed20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0004fc88  00000000  00000000  0001f963  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000013c  00000000  00000000  0006f5ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  0006f728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000438 	.word	0x08000438

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	08000438 	.word	0x08000438

080001d8 <main>:
#define LED_PIN					PIN5

char key;

int main(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0

	//1. ENABLE CLOCK ACCESS TO GPIOA
	RCC->AHB1ENR |= GPIOAEN;
 80001dc:	4b17      	ldr	r3, [pc, #92]	; (800023c <main+0x64>)
 80001de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001e0:	4a16      	ldr	r2, [pc, #88]	; (800023c <main+0x64>)
 80001e2:	f043 0301 	orr.w	r3, r3, #1
 80001e6:	6313      	str	r3, [r2, #48]	; 0x30

	//2. SET PA5 AS AN OUTPUT
	GPIOA->MODER |= (1U<<10);
 80001e8:	4b15      	ldr	r3, [pc, #84]	; (8000240 <main+0x68>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4a14      	ldr	r2, [pc, #80]	; (8000240 <main+0x68>)
 80001ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80001f2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~ (1U<<11);
 80001f4:	4b12      	ldr	r3, [pc, #72]	; (8000240 <main+0x68>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	4a11      	ldr	r2, [pc, #68]	; (8000240 <main+0x68>)
 80001fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80001fe:	6013      	str	r3, [r2, #0]


	uart2_rxtx_init();
 8000200:	f000 f822 	bl	8000248 <uart2_rxtx_init>

	while(1)
	{
		key = uart2_read();
 8000204:	f000 f890 	bl	8000328 <uart2_read>
 8000208:	4603      	mov	r3, r0
 800020a:	461a      	mov	r2, r3
 800020c:	4b0d      	ldr	r3, [pc, #52]	; (8000244 <main+0x6c>)
 800020e:	701a      	strb	r2, [r3, #0]
		if(key == '1')
 8000210:	4b0c      	ldr	r3, [pc, #48]	; (8000244 <main+0x6c>)
 8000212:	781b      	ldrb	r3, [r3, #0]
 8000214:	2b31      	cmp	r3, #49	; 0x31
 8000216:	d106      	bne.n	8000226 <main+0x4e>
		{
			GPIOA->ODR |= LED_PIN;
 8000218:	4b09      	ldr	r3, [pc, #36]	; (8000240 <main+0x68>)
 800021a:	695b      	ldr	r3, [r3, #20]
 800021c:	4a08      	ldr	r2, [pc, #32]	; (8000240 <main+0x68>)
 800021e:	f043 0320 	orr.w	r3, r3, #32
 8000222:	6153      	str	r3, [r2, #20]
 8000224:	e7ee      	b.n	8000204 <main+0x2c>
		}
		else if(key == '0')
 8000226:	4b07      	ldr	r3, [pc, #28]	; (8000244 <main+0x6c>)
 8000228:	781b      	ldrb	r3, [r3, #0]
 800022a:	2b30      	cmp	r3, #48	; 0x30
 800022c:	d1ea      	bne.n	8000204 <main+0x2c>
		{
			GPIOA->ODR &=~ LED_PIN;
 800022e:	4b04      	ldr	r3, [pc, #16]	; (8000240 <main+0x68>)
 8000230:	695b      	ldr	r3, [r3, #20]
 8000232:	4a03      	ldr	r2, [pc, #12]	; (8000240 <main+0x68>)
 8000234:	f023 0320 	bic.w	r3, r3, #32
 8000238:	6153      	str	r3, [r2, #20]
		key = uart2_read();
 800023a:	e7e3      	b.n	8000204 <main+0x2c>
 800023c:	40023800 	.word	0x40023800
 8000240:	40020000 	.word	0x40020000
 8000244:	2000001c 	.word	0x2000001c

08000248 <uart2_rxtx_init>:
	uart2_write(ch);
	return ch;
}

void uart2_rxtx_init(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	af00      	add	r7, sp, #0
	/****************Configure uart gpio pin***************/
	/*Enable clock access to gpioa */
	RCC->AHB1ENR |= GPIOAEN;
 800024c:	4b32      	ldr	r3, [pc, #200]	; (8000318 <uart2_rxtx_init+0xd0>)
 800024e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000250:	4a31      	ldr	r2, [pc, #196]	; (8000318 <uart2_rxtx_init+0xd0>)
 8000252:	f043 0301 	orr.w	r3, r3, #1
 8000256:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PA2 mode to alternate function mode*/
	GPIOA->MODER &=~(1U<<4);
 8000258:	4b30      	ldr	r3, [pc, #192]	; (800031c <uart2_rxtx_init+0xd4>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	4a2f      	ldr	r2, [pc, #188]	; (800031c <uart2_rxtx_init+0xd4>)
 800025e:	f023 0310 	bic.w	r3, r3, #16
 8000262:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 8000264:	4b2d      	ldr	r3, [pc, #180]	; (800031c <uart2_rxtx_init+0xd4>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	4a2c      	ldr	r2, [pc, #176]	; (800031c <uart2_rxtx_init+0xd4>)
 800026a:	f043 0320 	orr.w	r3, r3, #32
 800026e:	6013      	str	r3, [r2, #0]

	/*Set PA2 alternate function type to UART_TX (AF07)*/
	GPIOA->AFR[0] |= (1U<<8);
 8000270:	4b2a      	ldr	r3, [pc, #168]	; (800031c <uart2_rxtx_init+0xd4>)
 8000272:	6a1b      	ldr	r3, [r3, #32]
 8000274:	4a29      	ldr	r2, [pc, #164]	; (800031c <uart2_rxtx_init+0xd4>)
 8000276:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800027a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<9);
 800027c:	4b27      	ldr	r3, [pc, #156]	; (800031c <uart2_rxtx_init+0xd4>)
 800027e:	6a1b      	ldr	r3, [r3, #32]
 8000280:	4a26      	ldr	r2, [pc, #152]	; (800031c <uart2_rxtx_init+0xd4>)
 8000282:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000286:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<10);
 8000288:	4b24      	ldr	r3, [pc, #144]	; (800031c <uart2_rxtx_init+0xd4>)
 800028a:	6a1b      	ldr	r3, [r3, #32]
 800028c:	4a23      	ldr	r2, [pc, #140]	; (800031c <uart2_rxtx_init+0xd4>)
 800028e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000292:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<11);
 8000294:	4b21      	ldr	r3, [pc, #132]	; (800031c <uart2_rxtx_init+0xd4>)
 8000296:	6a1b      	ldr	r3, [r3, #32]
 8000298:	4a20      	ldr	r2, [pc, #128]	; (800031c <uart2_rxtx_init+0xd4>)
 800029a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800029e:	6213      	str	r3, [r2, #32]

	//SET PA3 MODE TO ALTERNATE FUNCTION MODE
	GPIOA->MODER &=~(1U<<6);
 80002a0:	4b1e      	ldr	r3, [pc, #120]	; (800031c <uart2_rxtx_init+0xd4>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	4a1d      	ldr	r2, [pc, #116]	; (800031c <uart2_rxtx_init+0xd4>)
 80002a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80002aa:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<7);
 80002ac:	4b1b      	ldr	r3, [pc, #108]	; (800031c <uart2_rxtx_init+0xd4>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	4a1a      	ldr	r2, [pc, #104]	; (800031c <uart2_rxtx_init+0xd4>)
 80002b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002b6:	6013      	str	r3, [r2, #0]

	//SET PA3 ALTERNATE FUNCTION TYPE TO UART_TX (AF07)
	GPIOA->AFR[0] |= (1U<<12);
 80002b8:	4b18      	ldr	r3, [pc, #96]	; (800031c <uart2_rxtx_init+0xd4>)
 80002ba:	6a1b      	ldr	r3, [r3, #32]
 80002bc:	4a17      	ldr	r2, [pc, #92]	; (800031c <uart2_rxtx_init+0xd4>)
 80002be:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80002c2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<13);
 80002c4:	4b15      	ldr	r3, [pc, #84]	; (800031c <uart2_rxtx_init+0xd4>)
 80002c6:	6a1b      	ldr	r3, [r3, #32]
 80002c8:	4a14      	ldr	r2, [pc, #80]	; (800031c <uart2_rxtx_init+0xd4>)
 80002ca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80002ce:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<14);
 80002d0:	4b12      	ldr	r3, [pc, #72]	; (800031c <uart2_rxtx_init+0xd4>)
 80002d2:	6a1b      	ldr	r3, [r3, #32]
 80002d4:	4a11      	ldr	r2, [pc, #68]	; (800031c <uart2_rxtx_init+0xd4>)
 80002d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80002da:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<15);
 80002dc:	4b0f      	ldr	r3, [pc, #60]	; (800031c <uart2_rxtx_init+0xd4>)
 80002de:	6a1b      	ldr	r3, [r3, #32]
 80002e0:	4a0e      	ldr	r2, [pc, #56]	; (800031c <uart2_rxtx_init+0xd4>)
 80002e2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80002e6:	6213      	str	r3, [r2, #32]

	/****************Configure uart module ***************/
	/*Enable clock access to uart2 */
	RCC->APB1ENR |= UART2EN;
 80002e8:	4b0b      	ldr	r3, [pc, #44]	; (8000318 <uart2_rxtx_init+0xd0>)
 80002ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002ec:	4a0a      	ldr	r2, [pc, #40]	; (8000318 <uart2_rxtx_init+0xd0>)
 80002ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002f2:	6413      	str	r3, [r2, #64]	; 0x40

	/*Configure baudrate*/
	uart_set_baudrate(USART2,APB1_CLK,UART_BAUDRATE);
 80002f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002f8:	4909      	ldr	r1, [pc, #36]	; (8000320 <uart2_rxtx_init+0xd8>)
 80002fa:	480a      	ldr	r0, [pc, #40]	; (8000324 <uart2_rxtx_init+0xdc>)
 80002fc:	f000 f828 	bl	8000350 <uart_set_baudrate>

	/*Configure the transfer direction*/
	 USART2->CR1 =  (CR1_TE | CR1_RE);
 8000300:	4b08      	ldr	r3, [pc, #32]	; (8000324 <uart2_rxtx_init+0xdc>)
 8000302:	220c      	movs	r2, #12
 8000304:	60da      	str	r2, [r3, #12]

	/*Enable uart module*/
	 USART2->CR1 |= CR1_UE;
 8000306:	4b07      	ldr	r3, [pc, #28]	; (8000324 <uart2_rxtx_init+0xdc>)
 8000308:	68db      	ldr	r3, [r3, #12]
 800030a:	4a06      	ldr	r2, [pc, #24]	; (8000324 <uart2_rxtx_init+0xdc>)
 800030c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000310:	60d3      	str	r3, [r2, #12]


}
 8000312:	bf00      	nop
 8000314:	bd80      	pop	{r7, pc}
 8000316:	bf00      	nop
 8000318:	40023800 	.word	0x40023800
 800031c:	40020000 	.word	0x40020000
 8000320:	00f42400 	.word	0x00f42400
 8000324:	40004400 	.word	0x40004400

08000328 <uart2_read>:
  /*Write to transmit data register*/
	USART2->DR	=  (ch & 0xFF);
}

char uart2_read(void)
{
 8000328:	b480      	push	{r7}
 800032a:	af00      	add	r7, sp, #0
	/*Make sure the receive data register is not empty*/
	while(!(USART2->SR & SR_RXNE)){}
 800032c:	bf00      	nop
 800032e:	4b07      	ldr	r3, [pc, #28]	; (800034c <uart2_read+0x24>)
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	f003 0320 	and.w	r3, r3, #32
 8000336:	2b00      	cmp	r3, #0
 8000338:	d0f9      	beq.n	800032e <uart2_read+0x6>

	/*Read receive data register*/
	return USART2->DR;
 800033a:	4b04      	ldr	r3, [pc, #16]	; (800034c <uart2_read+0x24>)
 800033c:	685b      	ldr	r3, [r3, #4]
 800033e:	b2db      	uxtb	r3, r3
}
 8000340:	4618      	mov	r0, r3
 8000342:	46bd      	mov	sp, r7
 8000344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000348:	4770      	bx	lr
 800034a:	bf00      	nop
 800034c:	40004400 	.word	0x40004400

08000350 <uart_set_baudrate>:



static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk,  uint32_t BaudRate)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b084      	sub	sp, #16
 8000354:	af00      	add	r7, sp, #0
 8000356:	60f8      	str	r0, [r7, #12]
 8000358:	60b9      	str	r1, [r7, #8]
 800035a:	607a      	str	r2, [r7, #4]
	USARTx->BRR =  compute_uart_bd(PeriphClk,BaudRate);
 800035c:	6879      	ldr	r1, [r7, #4]
 800035e:	68b8      	ldr	r0, [r7, #8]
 8000360:	f000 f808 	bl	8000374 <compute_uart_bd>
 8000364:	4603      	mov	r3, r0
 8000366:	461a      	mov	r2, r3
 8000368:	68fb      	ldr	r3, [r7, #12]
 800036a:	609a      	str	r2, [r3, #8]
}
 800036c:	bf00      	nop
 800036e:	3710      	adds	r7, #16
 8000370:	46bd      	mov	sp, r7
 8000372:	bd80      	pop	{r7, pc}

08000374 <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate)
{
 8000374:	b480      	push	{r7}
 8000376:	b083      	sub	sp, #12
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
 800037c:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (BaudRate/2U))/BaudRate);
 800037e:	683b      	ldr	r3, [r7, #0]
 8000380:	085a      	lsrs	r2, r3, #1
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	441a      	add	r2, r3
 8000386:	683b      	ldr	r3, [r7, #0]
 8000388:	fbb2 f3f3 	udiv	r3, r2, r3
 800038c:	b29b      	uxth	r3, r3
}
 800038e:	4618      	mov	r0, r3
 8000390:	370c      	adds	r7, #12
 8000392:	46bd      	mov	sp, r7
 8000394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000398:	4770      	bx	lr
	...

0800039c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800039c:	480d      	ldr	r0, [pc, #52]	; (80003d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800039e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003a0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003a4:	480c      	ldr	r0, [pc, #48]	; (80003d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80003a6:	490d      	ldr	r1, [pc, #52]	; (80003dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80003a8:	4a0d      	ldr	r2, [pc, #52]	; (80003e0 <LoopForever+0xe>)
  movs r3, #0
 80003aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003ac:	e002      	b.n	80003b4 <LoopCopyDataInit>

080003ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003b2:	3304      	adds	r3, #4

080003b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003b8:	d3f9      	bcc.n	80003ae <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003ba:	4a0a      	ldr	r2, [pc, #40]	; (80003e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003bc:	4c0a      	ldr	r4, [pc, #40]	; (80003e8 <LoopForever+0x16>)
  movs r3, #0
 80003be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003c0:	e001      	b.n	80003c6 <LoopFillZerobss>

080003c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003c4:	3204      	adds	r2, #4

080003c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003c8:	d3fb      	bcc.n	80003c2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003ca:	f000 f811 	bl	80003f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003ce:	f7ff ff03 	bl	80001d8 <main>

080003d2 <LoopForever>:

LoopForever:
  b LoopForever
 80003d2:	e7fe      	b.n	80003d2 <LoopForever>
  ldr   r0, =_estack
 80003d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003dc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003e0:	08000458 	.word	0x08000458
  ldr r2, =_sbss
 80003e4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003e8:	20000020 	.word	0x20000020

080003ec <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003ec:	e7fe      	b.n	80003ec <ADC_IRQHandler>
	...

080003f0 <__libc_init_array>:
 80003f0:	b570      	push	{r4, r5, r6, lr}
 80003f2:	4d0d      	ldr	r5, [pc, #52]	; (8000428 <__libc_init_array+0x38>)
 80003f4:	4c0d      	ldr	r4, [pc, #52]	; (800042c <__libc_init_array+0x3c>)
 80003f6:	1b64      	subs	r4, r4, r5
 80003f8:	10a4      	asrs	r4, r4, #2
 80003fa:	2600      	movs	r6, #0
 80003fc:	42a6      	cmp	r6, r4
 80003fe:	d109      	bne.n	8000414 <__libc_init_array+0x24>
 8000400:	4d0b      	ldr	r5, [pc, #44]	; (8000430 <__libc_init_array+0x40>)
 8000402:	4c0c      	ldr	r4, [pc, #48]	; (8000434 <__libc_init_array+0x44>)
 8000404:	f000 f818 	bl	8000438 <_init>
 8000408:	1b64      	subs	r4, r4, r5
 800040a:	10a4      	asrs	r4, r4, #2
 800040c:	2600      	movs	r6, #0
 800040e:	42a6      	cmp	r6, r4
 8000410:	d105      	bne.n	800041e <__libc_init_array+0x2e>
 8000412:	bd70      	pop	{r4, r5, r6, pc}
 8000414:	f855 3b04 	ldr.w	r3, [r5], #4
 8000418:	4798      	blx	r3
 800041a:	3601      	adds	r6, #1
 800041c:	e7ee      	b.n	80003fc <__libc_init_array+0xc>
 800041e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000422:	4798      	blx	r3
 8000424:	3601      	adds	r6, #1
 8000426:	e7f2      	b.n	800040e <__libc_init_array+0x1e>
 8000428:	08000450 	.word	0x08000450
 800042c:	08000450 	.word	0x08000450
 8000430:	08000450 	.word	0x08000450
 8000434:	08000454 	.word	0x08000454

08000438 <_init>:
 8000438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800043a:	bf00      	nop
 800043c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800043e:	bc08      	pop	{r3}
 8000440:	469e      	mov	lr, r3
 8000442:	4770      	bx	lr

08000444 <_fini>:
 8000444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000446:	bf00      	nop
 8000448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800044a:	bc08      	pop	{r3}
 800044c:	469e      	mov	lr, r3
 800044e:	4770      	bx	lr
