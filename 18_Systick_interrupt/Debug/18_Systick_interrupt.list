
18_Systick_interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000012f8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08001498  08001498  00011498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080014e4  080014e4  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  080014e4  080014e4  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080014e4  080014e4  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080014e4  080014e4  000114e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080014e8  080014e8  000114e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080014ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000005c  08001548  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  08001548  000201c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000110f  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000628  00000000  00000000  000211de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000190  00000000  00000000  00021808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000010f  00000000  00000000  00021998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000fb9d  00000000  00000000  00021aa7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000021a7  00000000  00000000  00031644  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00055941  00000000  00000000  000337eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000c4c  00000000  00000000  0008912c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000085  00000000  00000000  00089d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001480 	.word	0x08001480

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08001480 	.word	0x08001480

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <systick_1hz_interrupt>:
	SysTick->CTRL = 0;

}

void systick_1hz_interrupt(void)
{
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0
	//RELOAD WITH NUMBER OF CLOCK PER MILISECOND
	SysTick->LOAD = ONE_SEC_LOAD - 1;
 8000284:	4b0b      	ldr	r3, [pc, #44]	; (80002b4 <systick_1hz_interrupt+0x34>)
 8000286:	4a0c      	ldr	r2, [pc, #48]	; (80002b8 <systick_1hz_interrupt+0x38>)
 8000288:	605a      	str	r2, [r3, #4]

	//CLEAR SYSTICK CURRENT VALUE REGISTER
	SysTick->VAL = 0;
 800028a:	4b0a      	ldr	r3, [pc, #40]	; (80002b4 <systick_1hz_interrupt+0x34>)
 800028c:	2200      	movs	r2, #0
 800028e:	609a      	str	r2, [r3, #8]

	//ENABLE SYSTICK AND SELECT INTERNAL CLOCK SOURCE
	SysTick->CTRL |= CTRL_ENABLE | CTRL_CLKSRC;
 8000290:	4b08      	ldr	r3, [pc, #32]	; (80002b4 <systick_1hz_interrupt+0x34>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a07      	ldr	r2, [pc, #28]	; (80002b4 <systick_1hz_interrupt+0x34>)
 8000296:	f043 0305 	orr.w	r3, r3, #5
 800029a:	6013      	str	r3, [r2, #0]

	//ENABLE SYSTICK INTERRUPT
	SysTick->CTRL |= CTRL_TICKINT;
 800029c:	4b05      	ldr	r3, [pc, #20]	; (80002b4 <systick_1hz_interrupt+0x34>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a04      	ldr	r2, [pc, #16]	; (80002b4 <systick_1hz_interrupt+0x34>)
 80002a2:	f043 0302 	orr.w	r3, r3, #2
 80002a6:	6013      	str	r3, [r2, #0]
}
 80002a8:	bf00      	nop
 80002aa:	46bd      	mov	sp, r7
 80002ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	e000e010 	.word	0xe000e010
 80002b8:	00f423ff 	.word	0x00f423ff

080002bc <main>:
uint32_t sensor_value = 0;

static void systick_callback(void);

int main(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	af00      	add	r7, sp, #0
	uart2_rxtx_init();
 80002c0:	f000 f8e2 	bl	8000488 <uart2_rxtx_init>
	systick_1hz_interrupt();
 80002c4:	f7ff ffdc 	bl	8000280 <systick_1hz_interrupt>

	//1. ENABLE CLOCK ACCESS TO GPIOA
	RCC->AHB1ENR |= GPIOAEN;
 80002c8:	4b09      	ldr	r3, [pc, #36]	; (80002f0 <main+0x34>)
 80002ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002cc:	4a08      	ldr	r2, [pc, #32]	; (80002f0 <main+0x34>)
 80002ce:	f043 0301 	orr.w	r3, r3, #1
 80002d2:	6313      	str	r3, [r2, #48]	; 0x30

	//2. SET PA5 AS AN OUTPUT
	GPIOA->MODER |= (1U<<10);
 80002d4:	4b07      	ldr	r3, [pc, #28]	; (80002f4 <main+0x38>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	4a06      	ldr	r2, [pc, #24]	; (80002f4 <main+0x38>)
 80002da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002de:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~ (1U<<11);
 80002e0:	4b04      	ldr	r3, [pc, #16]	; (80002f4 <main+0x38>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	4a03      	ldr	r2, [pc, #12]	; (80002f4 <main+0x38>)
 80002e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80002ea:	6013      	str	r3, [r2, #0]

	while(1)
 80002ec:	e7fe      	b.n	80002ec <main+0x30>
 80002ee:	bf00      	nop
 80002f0:	40023800 	.word	0x40023800
 80002f4:	40020000 	.word	0x40020000

080002f8 <systick_callback>:

	}
}

static void systick_callback(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	af00      	add	r7, sp, #0
	//4.TOGGLE PA5
	GPIOA->ODR ^= LED_PIN;
 80002fc:	4b05      	ldr	r3, [pc, #20]	; (8000314 <systick_callback+0x1c>)
 80002fe:	695b      	ldr	r3, [r3, #20]
 8000300:	4a04      	ldr	r2, [pc, #16]	; (8000314 <systick_callback+0x1c>)
 8000302:	f083 0320 	eor.w	r3, r3, #32
 8000306:	6153      	str	r3, [r2, #20]

	printf("A second has passed \n\r");
 8000308:	4803      	ldr	r0, [pc, #12]	; (8000318 <systick_callback+0x20>)
 800030a:	f000 fa45 	bl	8000798 <iprintf>
}
 800030e:	bf00      	nop
 8000310:	bd80      	pop	{r7, pc}
 8000312:	bf00      	nop
 8000314:	40020000 	.word	0x40020000
 8000318:	08001498 	.word	0x08001498

0800031c <SysTick_Handler>:

void SysTick_Handler(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0
	//DO SOMENTHING
	systick_callback();
 8000320:	f7ff ffea 	bl	80002f8 <systick_callback>
}
 8000324:	bf00      	nop
 8000326:	bd80      	pop	{r7, pc}

08000328 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b086      	sub	sp, #24
 800032c:	af00      	add	r7, sp, #0
 800032e:	60f8      	str	r0, [r7, #12]
 8000330:	60b9      	str	r1, [r7, #8]
 8000332:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000334:	2300      	movs	r3, #0
 8000336:	617b      	str	r3, [r7, #20]
 8000338:	e00a      	b.n	8000350 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800033a:	f3af 8000 	nop.w
 800033e:	4601      	mov	r1, r0
 8000340:	68bb      	ldr	r3, [r7, #8]
 8000342:	1c5a      	adds	r2, r3, #1
 8000344:	60ba      	str	r2, [r7, #8]
 8000346:	b2ca      	uxtb	r2, r1
 8000348:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800034a:	697b      	ldr	r3, [r7, #20]
 800034c:	3301      	adds	r3, #1
 800034e:	617b      	str	r3, [r7, #20]
 8000350:	697a      	ldr	r2, [r7, #20]
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	429a      	cmp	r2, r3
 8000356:	dbf0      	blt.n	800033a <_read+0x12>
  }

  return len;
 8000358:	687b      	ldr	r3, [r7, #4]
}
 800035a:	4618      	mov	r0, r3
 800035c:	3718      	adds	r7, #24
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}

08000362 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000362:	b580      	push	{r7, lr}
 8000364:	b086      	sub	sp, #24
 8000366:	af00      	add	r7, sp, #0
 8000368:	60f8      	str	r0, [r7, #12]
 800036a:	60b9      	str	r1, [r7, #8]
 800036c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800036e:	2300      	movs	r3, #0
 8000370:	617b      	str	r3, [r7, #20]
 8000372:	e009      	b.n	8000388 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000374:	68bb      	ldr	r3, [r7, #8]
 8000376:	1c5a      	adds	r2, r3, #1
 8000378:	60ba      	str	r2, [r7, #8]
 800037a:	781b      	ldrb	r3, [r3, #0]
 800037c:	4618      	mov	r0, r3
 800037e:	f000 f877 	bl	8000470 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000382:	697b      	ldr	r3, [r7, #20]
 8000384:	3301      	adds	r3, #1
 8000386:	617b      	str	r3, [r7, #20]
 8000388:	697a      	ldr	r2, [r7, #20]
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	429a      	cmp	r2, r3
 800038e:	dbf1      	blt.n	8000374 <_write+0x12>
  }
  return len;
 8000390:	687b      	ldr	r3, [r7, #4]
}
 8000392:	4618      	mov	r0, r3
 8000394:	3718      	adds	r7, #24
 8000396:	46bd      	mov	sp, r7
 8000398:	bd80      	pop	{r7, pc}

0800039a <_close>:

int _close(int file)
{
 800039a:	b480      	push	{r7}
 800039c:	b083      	sub	sp, #12
 800039e:	af00      	add	r7, sp, #0
 80003a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80003a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80003a6:	4618      	mov	r0, r3
 80003a8:	370c      	adds	r7, #12
 80003aa:	46bd      	mov	sp, r7
 80003ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b0:	4770      	bx	lr

080003b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80003b2:	b480      	push	{r7}
 80003b4:	b083      	sub	sp, #12
 80003b6:	af00      	add	r7, sp, #0
 80003b8:	6078      	str	r0, [r7, #4]
 80003ba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80003bc:	683b      	ldr	r3, [r7, #0]
 80003be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80003c2:	605a      	str	r2, [r3, #4]
  return 0;
 80003c4:	2300      	movs	r3, #0
}
 80003c6:	4618      	mov	r0, r3
 80003c8:	370c      	adds	r7, #12
 80003ca:	46bd      	mov	sp, r7
 80003cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d0:	4770      	bx	lr

080003d2 <_isatty>:

int _isatty(int file)
{
 80003d2:	b480      	push	{r7}
 80003d4:	b083      	sub	sp, #12
 80003d6:	af00      	add	r7, sp, #0
 80003d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80003da:	2301      	movs	r3, #1
}
 80003dc:	4618      	mov	r0, r3
 80003de:	370c      	adds	r7, #12
 80003e0:	46bd      	mov	sp, r7
 80003e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e6:	4770      	bx	lr

080003e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80003e8:	b480      	push	{r7}
 80003ea:	b085      	sub	sp, #20
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	60f8      	str	r0, [r7, #12]
 80003f0:	60b9      	str	r1, [r7, #8]
 80003f2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80003f4:	2300      	movs	r3, #0
}
 80003f6:	4618      	mov	r0, r3
 80003f8:	3714      	adds	r7, #20
 80003fa:	46bd      	mov	sp, r7
 80003fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000400:	4770      	bx	lr
	...

08000404 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b086      	sub	sp, #24
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800040c:	4a14      	ldr	r2, [pc, #80]	; (8000460 <_sbrk+0x5c>)
 800040e:	4b15      	ldr	r3, [pc, #84]	; (8000464 <_sbrk+0x60>)
 8000410:	1ad3      	subs	r3, r2, r3
 8000412:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000414:	697b      	ldr	r3, [r7, #20]
 8000416:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000418:	4b13      	ldr	r3, [pc, #76]	; (8000468 <_sbrk+0x64>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	2b00      	cmp	r3, #0
 800041e:	d102      	bne.n	8000426 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000420:	4b11      	ldr	r3, [pc, #68]	; (8000468 <_sbrk+0x64>)
 8000422:	4a12      	ldr	r2, [pc, #72]	; (800046c <_sbrk+0x68>)
 8000424:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000426:	4b10      	ldr	r3, [pc, #64]	; (8000468 <_sbrk+0x64>)
 8000428:	681a      	ldr	r2, [r3, #0]
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	4413      	add	r3, r2
 800042e:	693a      	ldr	r2, [r7, #16]
 8000430:	429a      	cmp	r2, r3
 8000432:	d207      	bcs.n	8000444 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000434:	f000 fa54 	bl	80008e0 <__errno>
 8000438:	4603      	mov	r3, r0
 800043a:	220c      	movs	r2, #12
 800043c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800043e:	f04f 33ff 	mov.w	r3, #4294967295
 8000442:	e009      	b.n	8000458 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000444:	4b08      	ldr	r3, [pc, #32]	; (8000468 <_sbrk+0x64>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800044a:	4b07      	ldr	r3, [pc, #28]	; (8000468 <_sbrk+0x64>)
 800044c:	681a      	ldr	r2, [r3, #0]
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	4413      	add	r3, r2
 8000452:	4a05      	ldr	r2, [pc, #20]	; (8000468 <_sbrk+0x64>)
 8000454:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000456:	68fb      	ldr	r3, [r7, #12]
}
 8000458:	4618      	mov	r0, r3
 800045a:	3718      	adds	r7, #24
 800045c:	46bd      	mov	sp, r7
 800045e:	bd80      	pop	{r7, pc}
 8000460:	20020000 	.word	0x20020000
 8000464:	00000400 	.word	0x00000400
 8000468:	20000078 	.word	0x20000078
 800046c:	200001c8 	.word	0x200001c8

08000470 <__io_putchar>:
static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate);

void uart2_write(int ch);

int __io_putchar(int ch)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b082      	sub	sp, #8
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
	uart2_write(ch);
 8000478:	6878      	ldr	r0, [r7, #4]
 800047a:	f000 f875 	bl	8000568 <uart2_write>
	return ch;
 800047e:	687b      	ldr	r3, [r7, #4]
}
 8000480:	4618      	mov	r0, r3
 8000482:	3708      	adds	r7, #8
 8000484:	46bd      	mov	sp, r7
 8000486:	bd80      	pop	{r7, pc}

08000488 <uart2_rxtx_init>:

void uart2_rxtx_init(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	af00      	add	r7, sp, #0
	/****************Configure uart gpio pin***************/
	/*Enable clock access to gpioa */
	RCC->AHB1ENR |= GPIOAEN;
 800048c:	4b32      	ldr	r3, [pc, #200]	; (8000558 <uart2_rxtx_init+0xd0>)
 800048e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000490:	4a31      	ldr	r2, [pc, #196]	; (8000558 <uart2_rxtx_init+0xd0>)
 8000492:	f043 0301 	orr.w	r3, r3, #1
 8000496:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PA2 mode to alternate function mode*/
	GPIOA->MODER &=~(1U<<4);
 8000498:	4b30      	ldr	r3, [pc, #192]	; (800055c <uart2_rxtx_init+0xd4>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	4a2f      	ldr	r2, [pc, #188]	; (800055c <uart2_rxtx_init+0xd4>)
 800049e:	f023 0310 	bic.w	r3, r3, #16
 80004a2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 80004a4:	4b2d      	ldr	r3, [pc, #180]	; (800055c <uart2_rxtx_init+0xd4>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	4a2c      	ldr	r2, [pc, #176]	; (800055c <uart2_rxtx_init+0xd4>)
 80004aa:	f043 0320 	orr.w	r3, r3, #32
 80004ae:	6013      	str	r3, [r2, #0]

	/*Set PA2 alternate function type to UART_TX (AF07)*/
	GPIOA->AFR[0] |= (1U<<8);
 80004b0:	4b2a      	ldr	r3, [pc, #168]	; (800055c <uart2_rxtx_init+0xd4>)
 80004b2:	6a1b      	ldr	r3, [r3, #32]
 80004b4:	4a29      	ldr	r2, [pc, #164]	; (800055c <uart2_rxtx_init+0xd4>)
 80004b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004ba:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<9);
 80004bc:	4b27      	ldr	r3, [pc, #156]	; (800055c <uart2_rxtx_init+0xd4>)
 80004be:	6a1b      	ldr	r3, [r3, #32]
 80004c0:	4a26      	ldr	r2, [pc, #152]	; (800055c <uart2_rxtx_init+0xd4>)
 80004c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004c6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<10);
 80004c8:	4b24      	ldr	r3, [pc, #144]	; (800055c <uart2_rxtx_init+0xd4>)
 80004ca:	6a1b      	ldr	r3, [r3, #32]
 80004cc:	4a23      	ldr	r2, [pc, #140]	; (800055c <uart2_rxtx_init+0xd4>)
 80004ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004d2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<11);
 80004d4:	4b21      	ldr	r3, [pc, #132]	; (800055c <uart2_rxtx_init+0xd4>)
 80004d6:	6a1b      	ldr	r3, [r3, #32]
 80004d8:	4a20      	ldr	r2, [pc, #128]	; (800055c <uart2_rxtx_init+0xd4>)
 80004da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80004de:	6213      	str	r3, [r2, #32]

	//SET PA3 MODE TO ALTERNATE FUNCTION MODE
	GPIOA->MODER &=~(1U<<6);
 80004e0:	4b1e      	ldr	r3, [pc, #120]	; (800055c <uart2_rxtx_init+0xd4>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4a1d      	ldr	r2, [pc, #116]	; (800055c <uart2_rxtx_init+0xd4>)
 80004e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80004ea:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<7);
 80004ec:	4b1b      	ldr	r3, [pc, #108]	; (800055c <uart2_rxtx_init+0xd4>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4a1a      	ldr	r2, [pc, #104]	; (800055c <uart2_rxtx_init+0xd4>)
 80004f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004f6:	6013      	str	r3, [r2, #0]

	//SET PA3 ALTERNATE FUNCTION TYPE TO UART_TX (AF07)
	GPIOA->AFR[0] |= (1U<<12);
 80004f8:	4b18      	ldr	r3, [pc, #96]	; (800055c <uart2_rxtx_init+0xd4>)
 80004fa:	6a1b      	ldr	r3, [r3, #32]
 80004fc:	4a17      	ldr	r2, [pc, #92]	; (800055c <uart2_rxtx_init+0xd4>)
 80004fe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000502:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<13);
 8000504:	4b15      	ldr	r3, [pc, #84]	; (800055c <uart2_rxtx_init+0xd4>)
 8000506:	6a1b      	ldr	r3, [r3, #32]
 8000508:	4a14      	ldr	r2, [pc, #80]	; (800055c <uart2_rxtx_init+0xd4>)
 800050a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800050e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<14);
 8000510:	4b12      	ldr	r3, [pc, #72]	; (800055c <uart2_rxtx_init+0xd4>)
 8000512:	6a1b      	ldr	r3, [r3, #32]
 8000514:	4a11      	ldr	r2, [pc, #68]	; (800055c <uart2_rxtx_init+0xd4>)
 8000516:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800051a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<15);
 800051c:	4b0f      	ldr	r3, [pc, #60]	; (800055c <uart2_rxtx_init+0xd4>)
 800051e:	6a1b      	ldr	r3, [r3, #32]
 8000520:	4a0e      	ldr	r2, [pc, #56]	; (800055c <uart2_rxtx_init+0xd4>)
 8000522:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000526:	6213      	str	r3, [r2, #32]

	/****************Configure uart module ***************/
	/*Enable clock access to uart2 */
	RCC->APB1ENR |= UART2EN;
 8000528:	4b0b      	ldr	r3, [pc, #44]	; (8000558 <uart2_rxtx_init+0xd0>)
 800052a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800052c:	4a0a      	ldr	r2, [pc, #40]	; (8000558 <uart2_rxtx_init+0xd0>)
 800052e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000532:	6413      	str	r3, [r2, #64]	; 0x40

	/*Configure baudrate*/
	uart_set_baudrate(USART2,APB1_CLK,UART_BAUDRATE);
 8000534:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000538:	4909      	ldr	r1, [pc, #36]	; (8000560 <uart2_rxtx_init+0xd8>)
 800053a:	480a      	ldr	r0, [pc, #40]	; (8000564 <uart2_rxtx_init+0xdc>)
 800053c:	f000 f82c 	bl	8000598 <uart_set_baudrate>

	/*Configure the transfer direction*/
	 USART2->CR1 =  (CR1_TE | CR1_RE);
 8000540:	4b08      	ldr	r3, [pc, #32]	; (8000564 <uart2_rxtx_init+0xdc>)
 8000542:	220c      	movs	r2, #12
 8000544:	60da      	str	r2, [r3, #12]

	/*Enable uart module*/
	 USART2->CR1 |= CR1_UE;
 8000546:	4b07      	ldr	r3, [pc, #28]	; (8000564 <uart2_rxtx_init+0xdc>)
 8000548:	68db      	ldr	r3, [r3, #12]
 800054a:	4a06      	ldr	r2, [pc, #24]	; (8000564 <uart2_rxtx_init+0xdc>)
 800054c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000550:	60d3      	str	r3, [r2, #12]


}
 8000552:	bf00      	nop
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	40023800 	.word	0x40023800
 800055c:	40020000 	.word	0x40020000
 8000560:	00f42400 	.word	0x00f42400
 8000564:	40004400 	.word	0x40004400

08000568 <uart2_write>:


void uart2_write(int ch)
{
 8000568:	b480      	push	{r7}
 800056a:	b083      	sub	sp, #12
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  /*Make sure the transmit data register is empty*/
	while(!(USART2->SR & SR_TXE)){}
 8000570:	bf00      	nop
 8000572:	4b08      	ldr	r3, [pc, #32]	; (8000594 <uart2_write+0x2c>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800057a:	2b00      	cmp	r3, #0
 800057c:	d0f9      	beq.n	8000572 <uart2_write+0xa>

  /*Write to transmit data register*/
	USART2->DR	=  (ch & 0xFF);
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	4a04      	ldr	r2, [pc, #16]	; (8000594 <uart2_write+0x2c>)
 8000582:	b2db      	uxtb	r3, r3
 8000584:	6053      	str	r3, [r2, #4]
}
 8000586:	bf00      	nop
 8000588:	370c      	adds	r7, #12
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	40004400 	.word	0x40004400

08000598 <uart_set_baudrate>:
}



static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk,  uint32_t BaudRate)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b084      	sub	sp, #16
 800059c:	af00      	add	r7, sp, #0
 800059e:	60f8      	str	r0, [r7, #12]
 80005a0:	60b9      	str	r1, [r7, #8]
 80005a2:	607a      	str	r2, [r7, #4]
	USARTx->BRR =  compute_uart_bd(PeriphClk,BaudRate);
 80005a4:	6879      	ldr	r1, [r7, #4]
 80005a6:	68b8      	ldr	r0, [r7, #8]
 80005a8:	f000 f808 	bl	80005bc <compute_uart_bd>
 80005ac:	4603      	mov	r3, r0
 80005ae:	461a      	mov	r2, r3
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	609a      	str	r2, [r3, #8]
}
 80005b4:	bf00      	nop
 80005b6:	3710      	adds	r7, #16
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}

080005bc <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate)
{
 80005bc:	b480      	push	{r7}
 80005be:	b083      	sub	sp, #12
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
 80005c4:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (BaudRate/2U))/BaudRate);
 80005c6:	683b      	ldr	r3, [r7, #0]
 80005c8:	085a      	lsrs	r2, r3, #1
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	441a      	add	r2, r3
 80005ce:	683b      	ldr	r3, [r7, #0]
 80005d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80005d4:	b29b      	uxth	r3, r3
}
 80005d6:	4618      	mov	r0, r3
 80005d8:	370c      	adds	r7, #12
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
	...

080005e4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005e4:	480d      	ldr	r0, [pc, #52]	; (800061c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005e6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005e8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005ec:	480c      	ldr	r0, [pc, #48]	; (8000620 <LoopForever+0x6>)
  ldr r1, =_edata
 80005ee:	490d      	ldr	r1, [pc, #52]	; (8000624 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005f0:	4a0d      	ldr	r2, [pc, #52]	; (8000628 <LoopForever+0xe>)
  movs r3, #0
 80005f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005f4:	e002      	b.n	80005fc <LoopCopyDataInit>

080005f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005fa:	3304      	adds	r3, #4

080005fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000600:	d3f9      	bcc.n	80005f6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000602:	4a0a      	ldr	r2, [pc, #40]	; (800062c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000604:	4c0a      	ldr	r4, [pc, #40]	; (8000630 <LoopForever+0x16>)
  movs r3, #0
 8000606:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000608:	e001      	b.n	800060e <LoopFillZerobss>

0800060a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800060a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800060c:	3204      	adds	r2, #4

0800060e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800060e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000610:	d3fb      	bcc.n	800060a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000612:	f000 f96b 	bl	80008ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000616:	f7ff fe51 	bl	80002bc <main>

0800061a <LoopForever>:

LoopForever:
  b LoopForever
 800061a:	e7fe      	b.n	800061a <LoopForever>
  ldr   r0, =_estack
 800061c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000620:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000624:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000628:	080014ec 	.word	0x080014ec
  ldr r2, =_sbss
 800062c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000630:	200001c8 	.word	0x200001c8

08000634 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000634:	e7fe      	b.n	8000634 <ADC_IRQHandler>
	...

08000638 <std>:
 8000638:	2300      	movs	r3, #0
 800063a:	b510      	push	{r4, lr}
 800063c:	4604      	mov	r4, r0
 800063e:	e9c0 3300 	strd	r3, r3, [r0]
 8000642:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000646:	6083      	str	r3, [r0, #8]
 8000648:	8181      	strh	r1, [r0, #12]
 800064a:	6643      	str	r3, [r0, #100]	; 0x64
 800064c:	81c2      	strh	r2, [r0, #14]
 800064e:	6183      	str	r3, [r0, #24]
 8000650:	4619      	mov	r1, r3
 8000652:	2208      	movs	r2, #8
 8000654:	305c      	adds	r0, #92	; 0x5c
 8000656:	f000 f8f4 	bl	8000842 <memset>
 800065a:	4b05      	ldr	r3, [pc, #20]	; (8000670 <std+0x38>)
 800065c:	6263      	str	r3, [r4, #36]	; 0x24
 800065e:	4b05      	ldr	r3, [pc, #20]	; (8000674 <std+0x3c>)
 8000660:	62a3      	str	r3, [r4, #40]	; 0x28
 8000662:	4b05      	ldr	r3, [pc, #20]	; (8000678 <std+0x40>)
 8000664:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000666:	4b05      	ldr	r3, [pc, #20]	; (800067c <std+0x44>)
 8000668:	6224      	str	r4, [r4, #32]
 800066a:	6323      	str	r3, [r4, #48]	; 0x30
 800066c:	bd10      	pop	{r4, pc}
 800066e:	bf00      	nop
 8000670:	080007bd 	.word	0x080007bd
 8000674:	080007df 	.word	0x080007df
 8000678:	08000817 	.word	0x08000817
 800067c:	0800083b 	.word	0x0800083b

08000680 <stdio_exit_handler>:
 8000680:	4a02      	ldr	r2, [pc, #8]	; (800068c <stdio_exit_handler+0xc>)
 8000682:	4903      	ldr	r1, [pc, #12]	; (8000690 <stdio_exit_handler+0x10>)
 8000684:	4803      	ldr	r0, [pc, #12]	; (8000694 <stdio_exit_handler+0x14>)
 8000686:	f000 b869 	b.w	800075c <_fwalk_sglue>
 800068a:	bf00      	nop
 800068c:	20000000 	.word	0x20000000
 8000690:	080011dd 	.word	0x080011dd
 8000694:	2000000c 	.word	0x2000000c

08000698 <cleanup_stdio>:
 8000698:	6841      	ldr	r1, [r0, #4]
 800069a:	4b0c      	ldr	r3, [pc, #48]	; (80006cc <cleanup_stdio+0x34>)
 800069c:	4299      	cmp	r1, r3
 800069e:	b510      	push	{r4, lr}
 80006a0:	4604      	mov	r4, r0
 80006a2:	d001      	beq.n	80006a8 <cleanup_stdio+0x10>
 80006a4:	f000 fd9a 	bl	80011dc <_fflush_r>
 80006a8:	68a1      	ldr	r1, [r4, #8]
 80006aa:	4b09      	ldr	r3, [pc, #36]	; (80006d0 <cleanup_stdio+0x38>)
 80006ac:	4299      	cmp	r1, r3
 80006ae:	d002      	beq.n	80006b6 <cleanup_stdio+0x1e>
 80006b0:	4620      	mov	r0, r4
 80006b2:	f000 fd93 	bl	80011dc <_fflush_r>
 80006b6:	68e1      	ldr	r1, [r4, #12]
 80006b8:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <cleanup_stdio+0x3c>)
 80006ba:	4299      	cmp	r1, r3
 80006bc:	d004      	beq.n	80006c8 <cleanup_stdio+0x30>
 80006be:	4620      	mov	r0, r4
 80006c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006c4:	f000 bd8a 	b.w	80011dc <_fflush_r>
 80006c8:	bd10      	pop	{r4, pc}
 80006ca:	bf00      	nop
 80006cc:	2000007c 	.word	0x2000007c
 80006d0:	200000e4 	.word	0x200000e4
 80006d4:	2000014c 	.word	0x2000014c

080006d8 <global_stdio_init.part.0>:
 80006d8:	b510      	push	{r4, lr}
 80006da:	4b0b      	ldr	r3, [pc, #44]	; (8000708 <global_stdio_init.part.0+0x30>)
 80006dc:	4c0b      	ldr	r4, [pc, #44]	; (800070c <global_stdio_init.part.0+0x34>)
 80006de:	4a0c      	ldr	r2, [pc, #48]	; (8000710 <global_stdio_init.part.0+0x38>)
 80006e0:	601a      	str	r2, [r3, #0]
 80006e2:	4620      	mov	r0, r4
 80006e4:	2200      	movs	r2, #0
 80006e6:	2104      	movs	r1, #4
 80006e8:	f7ff ffa6 	bl	8000638 <std>
 80006ec:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80006f0:	2201      	movs	r2, #1
 80006f2:	2109      	movs	r1, #9
 80006f4:	f7ff ffa0 	bl	8000638 <std>
 80006f8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80006fc:	2202      	movs	r2, #2
 80006fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000702:	2112      	movs	r1, #18
 8000704:	f7ff bf98 	b.w	8000638 <std>
 8000708:	200001b4 	.word	0x200001b4
 800070c:	2000007c 	.word	0x2000007c
 8000710:	08000681 	.word	0x08000681

08000714 <__sfp_lock_acquire>:
 8000714:	4801      	ldr	r0, [pc, #4]	; (800071c <__sfp_lock_acquire+0x8>)
 8000716:	f000 b90d 	b.w	8000934 <__retarget_lock_acquire_recursive>
 800071a:	bf00      	nop
 800071c:	200001bd 	.word	0x200001bd

08000720 <__sfp_lock_release>:
 8000720:	4801      	ldr	r0, [pc, #4]	; (8000728 <__sfp_lock_release+0x8>)
 8000722:	f000 b908 	b.w	8000936 <__retarget_lock_release_recursive>
 8000726:	bf00      	nop
 8000728:	200001bd 	.word	0x200001bd

0800072c <__sinit>:
 800072c:	b510      	push	{r4, lr}
 800072e:	4604      	mov	r4, r0
 8000730:	f7ff fff0 	bl	8000714 <__sfp_lock_acquire>
 8000734:	6a23      	ldr	r3, [r4, #32]
 8000736:	b11b      	cbz	r3, 8000740 <__sinit+0x14>
 8000738:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800073c:	f7ff bff0 	b.w	8000720 <__sfp_lock_release>
 8000740:	4b04      	ldr	r3, [pc, #16]	; (8000754 <__sinit+0x28>)
 8000742:	6223      	str	r3, [r4, #32]
 8000744:	4b04      	ldr	r3, [pc, #16]	; (8000758 <__sinit+0x2c>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	2b00      	cmp	r3, #0
 800074a:	d1f5      	bne.n	8000738 <__sinit+0xc>
 800074c:	f7ff ffc4 	bl	80006d8 <global_stdio_init.part.0>
 8000750:	e7f2      	b.n	8000738 <__sinit+0xc>
 8000752:	bf00      	nop
 8000754:	08000699 	.word	0x08000699
 8000758:	200001b4 	.word	0x200001b4

0800075c <_fwalk_sglue>:
 800075c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000760:	4607      	mov	r7, r0
 8000762:	4688      	mov	r8, r1
 8000764:	4614      	mov	r4, r2
 8000766:	2600      	movs	r6, #0
 8000768:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800076c:	f1b9 0901 	subs.w	r9, r9, #1
 8000770:	d505      	bpl.n	800077e <_fwalk_sglue+0x22>
 8000772:	6824      	ldr	r4, [r4, #0]
 8000774:	2c00      	cmp	r4, #0
 8000776:	d1f7      	bne.n	8000768 <_fwalk_sglue+0xc>
 8000778:	4630      	mov	r0, r6
 800077a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800077e:	89ab      	ldrh	r3, [r5, #12]
 8000780:	2b01      	cmp	r3, #1
 8000782:	d907      	bls.n	8000794 <_fwalk_sglue+0x38>
 8000784:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000788:	3301      	adds	r3, #1
 800078a:	d003      	beq.n	8000794 <_fwalk_sglue+0x38>
 800078c:	4629      	mov	r1, r5
 800078e:	4638      	mov	r0, r7
 8000790:	47c0      	blx	r8
 8000792:	4306      	orrs	r6, r0
 8000794:	3568      	adds	r5, #104	; 0x68
 8000796:	e7e9      	b.n	800076c <_fwalk_sglue+0x10>

08000798 <iprintf>:
 8000798:	b40f      	push	{r0, r1, r2, r3}
 800079a:	b507      	push	{r0, r1, r2, lr}
 800079c:	4906      	ldr	r1, [pc, #24]	; (80007b8 <iprintf+0x20>)
 800079e:	ab04      	add	r3, sp, #16
 80007a0:	6808      	ldr	r0, [r1, #0]
 80007a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80007a6:	6881      	ldr	r1, [r0, #8]
 80007a8:	9301      	str	r3, [sp, #4]
 80007aa:	f000 f9e7 	bl	8000b7c <_vfiprintf_r>
 80007ae:	b003      	add	sp, #12
 80007b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80007b4:	b004      	add	sp, #16
 80007b6:	4770      	bx	lr
 80007b8:	20000058 	.word	0x20000058

080007bc <__sread>:
 80007bc:	b510      	push	{r4, lr}
 80007be:	460c      	mov	r4, r1
 80007c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80007c4:	f000 f868 	bl	8000898 <_read_r>
 80007c8:	2800      	cmp	r0, #0
 80007ca:	bfab      	itete	ge
 80007cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80007ce:	89a3      	ldrhlt	r3, [r4, #12]
 80007d0:	181b      	addge	r3, r3, r0
 80007d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80007d6:	bfac      	ite	ge
 80007d8:	6563      	strge	r3, [r4, #84]	; 0x54
 80007da:	81a3      	strhlt	r3, [r4, #12]
 80007dc:	bd10      	pop	{r4, pc}

080007de <__swrite>:
 80007de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80007e2:	461f      	mov	r7, r3
 80007e4:	898b      	ldrh	r3, [r1, #12]
 80007e6:	05db      	lsls	r3, r3, #23
 80007e8:	4605      	mov	r5, r0
 80007ea:	460c      	mov	r4, r1
 80007ec:	4616      	mov	r6, r2
 80007ee:	d505      	bpl.n	80007fc <__swrite+0x1e>
 80007f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80007f4:	2302      	movs	r3, #2
 80007f6:	2200      	movs	r2, #0
 80007f8:	f000 f83c 	bl	8000874 <_lseek_r>
 80007fc:	89a3      	ldrh	r3, [r4, #12]
 80007fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000802:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000806:	81a3      	strh	r3, [r4, #12]
 8000808:	4632      	mov	r2, r6
 800080a:	463b      	mov	r3, r7
 800080c:	4628      	mov	r0, r5
 800080e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000812:	f000 b853 	b.w	80008bc <_write_r>

08000816 <__sseek>:
 8000816:	b510      	push	{r4, lr}
 8000818:	460c      	mov	r4, r1
 800081a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800081e:	f000 f829 	bl	8000874 <_lseek_r>
 8000822:	1c43      	adds	r3, r0, #1
 8000824:	89a3      	ldrh	r3, [r4, #12]
 8000826:	bf15      	itete	ne
 8000828:	6560      	strne	r0, [r4, #84]	; 0x54
 800082a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800082e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000832:	81a3      	strheq	r3, [r4, #12]
 8000834:	bf18      	it	ne
 8000836:	81a3      	strhne	r3, [r4, #12]
 8000838:	bd10      	pop	{r4, pc}

0800083a <__sclose>:
 800083a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800083e:	f000 b809 	b.w	8000854 <_close_r>

08000842 <memset>:
 8000842:	4402      	add	r2, r0
 8000844:	4603      	mov	r3, r0
 8000846:	4293      	cmp	r3, r2
 8000848:	d100      	bne.n	800084c <memset+0xa>
 800084a:	4770      	bx	lr
 800084c:	f803 1b01 	strb.w	r1, [r3], #1
 8000850:	e7f9      	b.n	8000846 <memset+0x4>
	...

08000854 <_close_r>:
 8000854:	b538      	push	{r3, r4, r5, lr}
 8000856:	4d06      	ldr	r5, [pc, #24]	; (8000870 <_close_r+0x1c>)
 8000858:	2300      	movs	r3, #0
 800085a:	4604      	mov	r4, r0
 800085c:	4608      	mov	r0, r1
 800085e:	602b      	str	r3, [r5, #0]
 8000860:	f7ff fd9b 	bl	800039a <_close>
 8000864:	1c43      	adds	r3, r0, #1
 8000866:	d102      	bne.n	800086e <_close_r+0x1a>
 8000868:	682b      	ldr	r3, [r5, #0]
 800086a:	b103      	cbz	r3, 800086e <_close_r+0x1a>
 800086c:	6023      	str	r3, [r4, #0]
 800086e:	bd38      	pop	{r3, r4, r5, pc}
 8000870:	200001b8 	.word	0x200001b8

08000874 <_lseek_r>:
 8000874:	b538      	push	{r3, r4, r5, lr}
 8000876:	4d07      	ldr	r5, [pc, #28]	; (8000894 <_lseek_r+0x20>)
 8000878:	4604      	mov	r4, r0
 800087a:	4608      	mov	r0, r1
 800087c:	4611      	mov	r1, r2
 800087e:	2200      	movs	r2, #0
 8000880:	602a      	str	r2, [r5, #0]
 8000882:	461a      	mov	r2, r3
 8000884:	f7ff fdb0 	bl	80003e8 <_lseek>
 8000888:	1c43      	adds	r3, r0, #1
 800088a:	d102      	bne.n	8000892 <_lseek_r+0x1e>
 800088c:	682b      	ldr	r3, [r5, #0]
 800088e:	b103      	cbz	r3, 8000892 <_lseek_r+0x1e>
 8000890:	6023      	str	r3, [r4, #0]
 8000892:	bd38      	pop	{r3, r4, r5, pc}
 8000894:	200001b8 	.word	0x200001b8

08000898 <_read_r>:
 8000898:	b538      	push	{r3, r4, r5, lr}
 800089a:	4d07      	ldr	r5, [pc, #28]	; (80008b8 <_read_r+0x20>)
 800089c:	4604      	mov	r4, r0
 800089e:	4608      	mov	r0, r1
 80008a0:	4611      	mov	r1, r2
 80008a2:	2200      	movs	r2, #0
 80008a4:	602a      	str	r2, [r5, #0]
 80008a6:	461a      	mov	r2, r3
 80008a8:	f7ff fd3e 	bl	8000328 <_read>
 80008ac:	1c43      	adds	r3, r0, #1
 80008ae:	d102      	bne.n	80008b6 <_read_r+0x1e>
 80008b0:	682b      	ldr	r3, [r5, #0]
 80008b2:	b103      	cbz	r3, 80008b6 <_read_r+0x1e>
 80008b4:	6023      	str	r3, [r4, #0]
 80008b6:	bd38      	pop	{r3, r4, r5, pc}
 80008b8:	200001b8 	.word	0x200001b8

080008bc <_write_r>:
 80008bc:	b538      	push	{r3, r4, r5, lr}
 80008be:	4d07      	ldr	r5, [pc, #28]	; (80008dc <_write_r+0x20>)
 80008c0:	4604      	mov	r4, r0
 80008c2:	4608      	mov	r0, r1
 80008c4:	4611      	mov	r1, r2
 80008c6:	2200      	movs	r2, #0
 80008c8:	602a      	str	r2, [r5, #0]
 80008ca:	461a      	mov	r2, r3
 80008cc:	f7ff fd49 	bl	8000362 <_write>
 80008d0:	1c43      	adds	r3, r0, #1
 80008d2:	d102      	bne.n	80008da <_write_r+0x1e>
 80008d4:	682b      	ldr	r3, [r5, #0]
 80008d6:	b103      	cbz	r3, 80008da <_write_r+0x1e>
 80008d8:	6023      	str	r3, [r4, #0]
 80008da:	bd38      	pop	{r3, r4, r5, pc}
 80008dc:	200001b8 	.word	0x200001b8

080008e0 <__errno>:
 80008e0:	4b01      	ldr	r3, [pc, #4]	; (80008e8 <__errno+0x8>)
 80008e2:	6818      	ldr	r0, [r3, #0]
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	20000058 	.word	0x20000058

080008ec <__libc_init_array>:
 80008ec:	b570      	push	{r4, r5, r6, lr}
 80008ee:	4d0d      	ldr	r5, [pc, #52]	; (8000924 <__libc_init_array+0x38>)
 80008f0:	4c0d      	ldr	r4, [pc, #52]	; (8000928 <__libc_init_array+0x3c>)
 80008f2:	1b64      	subs	r4, r4, r5
 80008f4:	10a4      	asrs	r4, r4, #2
 80008f6:	2600      	movs	r6, #0
 80008f8:	42a6      	cmp	r6, r4
 80008fa:	d109      	bne.n	8000910 <__libc_init_array+0x24>
 80008fc:	4d0b      	ldr	r5, [pc, #44]	; (800092c <__libc_init_array+0x40>)
 80008fe:	4c0c      	ldr	r4, [pc, #48]	; (8000930 <__libc_init_array+0x44>)
 8000900:	f000 fdbe 	bl	8001480 <_init>
 8000904:	1b64      	subs	r4, r4, r5
 8000906:	10a4      	asrs	r4, r4, #2
 8000908:	2600      	movs	r6, #0
 800090a:	42a6      	cmp	r6, r4
 800090c:	d105      	bne.n	800091a <__libc_init_array+0x2e>
 800090e:	bd70      	pop	{r4, r5, r6, pc}
 8000910:	f855 3b04 	ldr.w	r3, [r5], #4
 8000914:	4798      	blx	r3
 8000916:	3601      	adds	r6, #1
 8000918:	e7ee      	b.n	80008f8 <__libc_init_array+0xc>
 800091a:	f855 3b04 	ldr.w	r3, [r5], #4
 800091e:	4798      	blx	r3
 8000920:	3601      	adds	r6, #1
 8000922:	e7f2      	b.n	800090a <__libc_init_array+0x1e>
 8000924:	080014e4 	.word	0x080014e4
 8000928:	080014e4 	.word	0x080014e4
 800092c:	080014e4 	.word	0x080014e4
 8000930:	080014e8 	.word	0x080014e8

08000934 <__retarget_lock_acquire_recursive>:
 8000934:	4770      	bx	lr

08000936 <__retarget_lock_release_recursive>:
 8000936:	4770      	bx	lr

08000938 <_free_r>:
 8000938:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800093a:	2900      	cmp	r1, #0
 800093c:	d044      	beq.n	80009c8 <_free_r+0x90>
 800093e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000942:	9001      	str	r0, [sp, #4]
 8000944:	2b00      	cmp	r3, #0
 8000946:	f1a1 0404 	sub.w	r4, r1, #4
 800094a:	bfb8      	it	lt
 800094c:	18e4      	addlt	r4, r4, r3
 800094e:	f000 f8df 	bl	8000b10 <__malloc_lock>
 8000952:	4a1e      	ldr	r2, [pc, #120]	; (80009cc <_free_r+0x94>)
 8000954:	9801      	ldr	r0, [sp, #4]
 8000956:	6813      	ldr	r3, [r2, #0]
 8000958:	b933      	cbnz	r3, 8000968 <_free_r+0x30>
 800095a:	6063      	str	r3, [r4, #4]
 800095c:	6014      	str	r4, [r2, #0]
 800095e:	b003      	add	sp, #12
 8000960:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000964:	f000 b8da 	b.w	8000b1c <__malloc_unlock>
 8000968:	42a3      	cmp	r3, r4
 800096a:	d908      	bls.n	800097e <_free_r+0x46>
 800096c:	6825      	ldr	r5, [r4, #0]
 800096e:	1961      	adds	r1, r4, r5
 8000970:	428b      	cmp	r3, r1
 8000972:	bf01      	itttt	eq
 8000974:	6819      	ldreq	r1, [r3, #0]
 8000976:	685b      	ldreq	r3, [r3, #4]
 8000978:	1949      	addeq	r1, r1, r5
 800097a:	6021      	streq	r1, [r4, #0]
 800097c:	e7ed      	b.n	800095a <_free_r+0x22>
 800097e:	461a      	mov	r2, r3
 8000980:	685b      	ldr	r3, [r3, #4]
 8000982:	b10b      	cbz	r3, 8000988 <_free_r+0x50>
 8000984:	42a3      	cmp	r3, r4
 8000986:	d9fa      	bls.n	800097e <_free_r+0x46>
 8000988:	6811      	ldr	r1, [r2, #0]
 800098a:	1855      	adds	r5, r2, r1
 800098c:	42a5      	cmp	r5, r4
 800098e:	d10b      	bne.n	80009a8 <_free_r+0x70>
 8000990:	6824      	ldr	r4, [r4, #0]
 8000992:	4421      	add	r1, r4
 8000994:	1854      	adds	r4, r2, r1
 8000996:	42a3      	cmp	r3, r4
 8000998:	6011      	str	r1, [r2, #0]
 800099a:	d1e0      	bne.n	800095e <_free_r+0x26>
 800099c:	681c      	ldr	r4, [r3, #0]
 800099e:	685b      	ldr	r3, [r3, #4]
 80009a0:	6053      	str	r3, [r2, #4]
 80009a2:	440c      	add	r4, r1
 80009a4:	6014      	str	r4, [r2, #0]
 80009a6:	e7da      	b.n	800095e <_free_r+0x26>
 80009a8:	d902      	bls.n	80009b0 <_free_r+0x78>
 80009aa:	230c      	movs	r3, #12
 80009ac:	6003      	str	r3, [r0, #0]
 80009ae:	e7d6      	b.n	800095e <_free_r+0x26>
 80009b0:	6825      	ldr	r5, [r4, #0]
 80009b2:	1961      	adds	r1, r4, r5
 80009b4:	428b      	cmp	r3, r1
 80009b6:	bf04      	itt	eq
 80009b8:	6819      	ldreq	r1, [r3, #0]
 80009ba:	685b      	ldreq	r3, [r3, #4]
 80009bc:	6063      	str	r3, [r4, #4]
 80009be:	bf04      	itt	eq
 80009c0:	1949      	addeq	r1, r1, r5
 80009c2:	6021      	streq	r1, [r4, #0]
 80009c4:	6054      	str	r4, [r2, #4]
 80009c6:	e7ca      	b.n	800095e <_free_r+0x26>
 80009c8:	b003      	add	sp, #12
 80009ca:	bd30      	pop	{r4, r5, pc}
 80009cc:	200001c0 	.word	0x200001c0

080009d0 <sbrk_aligned>:
 80009d0:	b570      	push	{r4, r5, r6, lr}
 80009d2:	4e0e      	ldr	r6, [pc, #56]	; (8000a0c <sbrk_aligned+0x3c>)
 80009d4:	460c      	mov	r4, r1
 80009d6:	6831      	ldr	r1, [r6, #0]
 80009d8:	4605      	mov	r5, r0
 80009da:	b911      	cbnz	r1, 80009e2 <sbrk_aligned+0x12>
 80009dc:	f000 fcbc 	bl	8001358 <_sbrk_r>
 80009e0:	6030      	str	r0, [r6, #0]
 80009e2:	4621      	mov	r1, r4
 80009e4:	4628      	mov	r0, r5
 80009e6:	f000 fcb7 	bl	8001358 <_sbrk_r>
 80009ea:	1c43      	adds	r3, r0, #1
 80009ec:	d00a      	beq.n	8000a04 <sbrk_aligned+0x34>
 80009ee:	1cc4      	adds	r4, r0, #3
 80009f0:	f024 0403 	bic.w	r4, r4, #3
 80009f4:	42a0      	cmp	r0, r4
 80009f6:	d007      	beq.n	8000a08 <sbrk_aligned+0x38>
 80009f8:	1a21      	subs	r1, r4, r0
 80009fa:	4628      	mov	r0, r5
 80009fc:	f000 fcac 	bl	8001358 <_sbrk_r>
 8000a00:	3001      	adds	r0, #1
 8000a02:	d101      	bne.n	8000a08 <sbrk_aligned+0x38>
 8000a04:	f04f 34ff 	mov.w	r4, #4294967295
 8000a08:	4620      	mov	r0, r4
 8000a0a:	bd70      	pop	{r4, r5, r6, pc}
 8000a0c:	200001c4 	.word	0x200001c4

08000a10 <_malloc_r>:
 8000a10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000a14:	1ccd      	adds	r5, r1, #3
 8000a16:	f025 0503 	bic.w	r5, r5, #3
 8000a1a:	3508      	adds	r5, #8
 8000a1c:	2d0c      	cmp	r5, #12
 8000a1e:	bf38      	it	cc
 8000a20:	250c      	movcc	r5, #12
 8000a22:	2d00      	cmp	r5, #0
 8000a24:	4607      	mov	r7, r0
 8000a26:	db01      	blt.n	8000a2c <_malloc_r+0x1c>
 8000a28:	42a9      	cmp	r1, r5
 8000a2a:	d905      	bls.n	8000a38 <_malloc_r+0x28>
 8000a2c:	230c      	movs	r3, #12
 8000a2e:	603b      	str	r3, [r7, #0]
 8000a30:	2600      	movs	r6, #0
 8000a32:	4630      	mov	r0, r6
 8000a34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000a38:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000b0c <_malloc_r+0xfc>
 8000a3c:	f000 f868 	bl	8000b10 <__malloc_lock>
 8000a40:	f8d8 3000 	ldr.w	r3, [r8]
 8000a44:	461c      	mov	r4, r3
 8000a46:	bb5c      	cbnz	r4, 8000aa0 <_malloc_r+0x90>
 8000a48:	4629      	mov	r1, r5
 8000a4a:	4638      	mov	r0, r7
 8000a4c:	f7ff ffc0 	bl	80009d0 <sbrk_aligned>
 8000a50:	1c43      	adds	r3, r0, #1
 8000a52:	4604      	mov	r4, r0
 8000a54:	d155      	bne.n	8000b02 <_malloc_r+0xf2>
 8000a56:	f8d8 4000 	ldr.w	r4, [r8]
 8000a5a:	4626      	mov	r6, r4
 8000a5c:	2e00      	cmp	r6, #0
 8000a5e:	d145      	bne.n	8000aec <_malloc_r+0xdc>
 8000a60:	2c00      	cmp	r4, #0
 8000a62:	d048      	beq.n	8000af6 <_malloc_r+0xe6>
 8000a64:	6823      	ldr	r3, [r4, #0]
 8000a66:	4631      	mov	r1, r6
 8000a68:	4638      	mov	r0, r7
 8000a6a:	eb04 0903 	add.w	r9, r4, r3
 8000a6e:	f000 fc73 	bl	8001358 <_sbrk_r>
 8000a72:	4581      	cmp	r9, r0
 8000a74:	d13f      	bne.n	8000af6 <_malloc_r+0xe6>
 8000a76:	6821      	ldr	r1, [r4, #0]
 8000a78:	1a6d      	subs	r5, r5, r1
 8000a7a:	4629      	mov	r1, r5
 8000a7c:	4638      	mov	r0, r7
 8000a7e:	f7ff ffa7 	bl	80009d0 <sbrk_aligned>
 8000a82:	3001      	adds	r0, #1
 8000a84:	d037      	beq.n	8000af6 <_malloc_r+0xe6>
 8000a86:	6823      	ldr	r3, [r4, #0]
 8000a88:	442b      	add	r3, r5
 8000a8a:	6023      	str	r3, [r4, #0]
 8000a8c:	f8d8 3000 	ldr.w	r3, [r8]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d038      	beq.n	8000b06 <_malloc_r+0xf6>
 8000a94:	685a      	ldr	r2, [r3, #4]
 8000a96:	42a2      	cmp	r2, r4
 8000a98:	d12b      	bne.n	8000af2 <_malloc_r+0xe2>
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	605a      	str	r2, [r3, #4]
 8000a9e:	e00f      	b.n	8000ac0 <_malloc_r+0xb0>
 8000aa0:	6822      	ldr	r2, [r4, #0]
 8000aa2:	1b52      	subs	r2, r2, r5
 8000aa4:	d41f      	bmi.n	8000ae6 <_malloc_r+0xd6>
 8000aa6:	2a0b      	cmp	r2, #11
 8000aa8:	d917      	bls.n	8000ada <_malloc_r+0xca>
 8000aaa:	1961      	adds	r1, r4, r5
 8000aac:	42a3      	cmp	r3, r4
 8000aae:	6025      	str	r5, [r4, #0]
 8000ab0:	bf18      	it	ne
 8000ab2:	6059      	strne	r1, [r3, #4]
 8000ab4:	6863      	ldr	r3, [r4, #4]
 8000ab6:	bf08      	it	eq
 8000ab8:	f8c8 1000 	streq.w	r1, [r8]
 8000abc:	5162      	str	r2, [r4, r5]
 8000abe:	604b      	str	r3, [r1, #4]
 8000ac0:	4638      	mov	r0, r7
 8000ac2:	f104 060b 	add.w	r6, r4, #11
 8000ac6:	f000 f829 	bl	8000b1c <__malloc_unlock>
 8000aca:	f026 0607 	bic.w	r6, r6, #7
 8000ace:	1d23      	adds	r3, r4, #4
 8000ad0:	1af2      	subs	r2, r6, r3
 8000ad2:	d0ae      	beq.n	8000a32 <_malloc_r+0x22>
 8000ad4:	1b9b      	subs	r3, r3, r6
 8000ad6:	50a3      	str	r3, [r4, r2]
 8000ad8:	e7ab      	b.n	8000a32 <_malloc_r+0x22>
 8000ada:	42a3      	cmp	r3, r4
 8000adc:	6862      	ldr	r2, [r4, #4]
 8000ade:	d1dd      	bne.n	8000a9c <_malloc_r+0x8c>
 8000ae0:	f8c8 2000 	str.w	r2, [r8]
 8000ae4:	e7ec      	b.n	8000ac0 <_malloc_r+0xb0>
 8000ae6:	4623      	mov	r3, r4
 8000ae8:	6864      	ldr	r4, [r4, #4]
 8000aea:	e7ac      	b.n	8000a46 <_malloc_r+0x36>
 8000aec:	4634      	mov	r4, r6
 8000aee:	6876      	ldr	r6, [r6, #4]
 8000af0:	e7b4      	b.n	8000a5c <_malloc_r+0x4c>
 8000af2:	4613      	mov	r3, r2
 8000af4:	e7cc      	b.n	8000a90 <_malloc_r+0x80>
 8000af6:	230c      	movs	r3, #12
 8000af8:	603b      	str	r3, [r7, #0]
 8000afa:	4638      	mov	r0, r7
 8000afc:	f000 f80e 	bl	8000b1c <__malloc_unlock>
 8000b00:	e797      	b.n	8000a32 <_malloc_r+0x22>
 8000b02:	6025      	str	r5, [r4, #0]
 8000b04:	e7dc      	b.n	8000ac0 <_malloc_r+0xb0>
 8000b06:	605b      	str	r3, [r3, #4]
 8000b08:	deff      	udf	#255	; 0xff
 8000b0a:	bf00      	nop
 8000b0c:	200001c0 	.word	0x200001c0

08000b10 <__malloc_lock>:
 8000b10:	4801      	ldr	r0, [pc, #4]	; (8000b18 <__malloc_lock+0x8>)
 8000b12:	f7ff bf0f 	b.w	8000934 <__retarget_lock_acquire_recursive>
 8000b16:	bf00      	nop
 8000b18:	200001bc 	.word	0x200001bc

08000b1c <__malloc_unlock>:
 8000b1c:	4801      	ldr	r0, [pc, #4]	; (8000b24 <__malloc_unlock+0x8>)
 8000b1e:	f7ff bf0a 	b.w	8000936 <__retarget_lock_release_recursive>
 8000b22:	bf00      	nop
 8000b24:	200001bc 	.word	0x200001bc

08000b28 <__sfputc_r>:
 8000b28:	6893      	ldr	r3, [r2, #8]
 8000b2a:	3b01      	subs	r3, #1
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	b410      	push	{r4}
 8000b30:	6093      	str	r3, [r2, #8]
 8000b32:	da08      	bge.n	8000b46 <__sfputc_r+0x1e>
 8000b34:	6994      	ldr	r4, [r2, #24]
 8000b36:	42a3      	cmp	r3, r4
 8000b38:	db01      	blt.n	8000b3e <__sfputc_r+0x16>
 8000b3a:	290a      	cmp	r1, #10
 8000b3c:	d103      	bne.n	8000b46 <__sfputc_r+0x1e>
 8000b3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000b42:	f000 bb73 	b.w	800122c <__swbuf_r>
 8000b46:	6813      	ldr	r3, [r2, #0]
 8000b48:	1c58      	adds	r0, r3, #1
 8000b4a:	6010      	str	r0, [r2, #0]
 8000b4c:	7019      	strb	r1, [r3, #0]
 8000b4e:	4608      	mov	r0, r1
 8000b50:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000b54:	4770      	bx	lr

08000b56 <__sfputs_r>:
 8000b56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b58:	4606      	mov	r6, r0
 8000b5a:	460f      	mov	r7, r1
 8000b5c:	4614      	mov	r4, r2
 8000b5e:	18d5      	adds	r5, r2, r3
 8000b60:	42ac      	cmp	r4, r5
 8000b62:	d101      	bne.n	8000b68 <__sfputs_r+0x12>
 8000b64:	2000      	movs	r0, #0
 8000b66:	e007      	b.n	8000b78 <__sfputs_r+0x22>
 8000b68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000b6c:	463a      	mov	r2, r7
 8000b6e:	4630      	mov	r0, r6
 8000b70:	f7ff ffda 	bl	8000b28 <__sfputc_r>
 8000b74:	1c43      	adds	r3, r0, #1
 8000b76:	d1f3      	bne.n	8000b60 <__sfputs_r+0xa>
 8000b78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000b7c <_vfiprintf_r>:
 8000b7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b80:	460d      	mov	r5, r1
 8000b82:	b09d      	sub	sp, #116	; 0x74
 8000b84:	4614      	mov	r4, r2
 8000b86:	4698      	mov	r8, r3
 8000b88:	4606      	mov	r6, r0
 8000b8a:	b118      	cbz	r0, 8000b94 <_vfiprintf_r+0x18>
 8000b8c:	6a03      	ldr	r3, [r0, #32]
 8000b8e:	b90b      	cbnz	r3, 8000b94 <_vfiprintf_r+0x18>
 8000b90:	f7ff fdcc 	bl	800072c <__sinit>
 8000b94:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000b96:	07d9      	lsls	r1, r3, #31
 8000b98:	d405      	bmi.n	8000ba6 <_vfiprintf_r+0x2a>
 8000b9a:	89ab      	ldrh	r3, [r5, #12]
 8000b9c:	059a      	lsls	r2, r3, #22
 8000b9e:	d402      	bmi.n	8000ba6 <_vfiprintf_r+0x2a>
 8000ba0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000ba2:	f7ff fec7 	bl	8000934 <__retarget_lock_acquire_recursive>
 8000ba6:	89ab      	ldrh	r3, [r5, #12]
 8000ba8:	071b      	lsls	r3, r3, #28
 8000baa:	d501      	bpl.n	8000bb0 <_vfiprintf_r+0x34>
 8000bac:	692b      	ldr	r3, [r5, #16]
 8000bae:	b99b      	cbnz	r3, 8000bd8 <_vfiprintf_r+0x5c>
 8000bb0:	4629      	mov	r1, r5
 8000bb2:	4630      	mov	r0, r6
 8000bb4:	f000 fb78 	bl	80012a8 <__swsetup_r>
 8000bb8:	b170      	cbz	r0, 8000bd8 <_vfiprintf_r+0x5c>
 8000bba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000bbc:	07dc      	lsls	r4, r3, #31
 8000bbe:	d504      	bpl.n	8000bca <_vfiprintf_r+0x4e>
 8000bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc4:	b01d      	add	sp, #116	; 0x74
 8000bc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000bca:	89ab      	ldrh	r3, [r5, #12]
 8000bcc:	0598      	lsls	r0, r3, #22
 8000bce:	d4f7      	bmi.n	8000bc0 <_vfiprintf_r+0x44>
 8000bd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000bd2:	f7ff feb0 	bl	8000936 <__retarget_lock_release_recursive>
 8000bd6:	e7f3      	b.n	8000bc0 <_vfiprintf_r+0x44>
 8000bd8:	2300      	movs	r3, #0
 8000bda:	9309      	str	r3, [sp, #36]	; 0x24
 8000bdc:	2320      	movs	r3, #32
 8000bde:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000be2:	f8cd 800c 	str.w	r8, [sp, #12]
 8000be6:	2330      	movs	r3, #48	; 0x30
 8000be8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8000d9c <_vfiprintf_r+0x220>
 8000bec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000bf0:	f04f 0901 	mov.w	r9, #1
 8000bf4:	4623      	mov	r3, r4
 8000bf6:	469a      	mov	sl, r3
 8000bf8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000bfc:	b10a      	cbz	r2, 8000c02 <_vfiprintf_r+0x86>
 8000bfe:	2a25      	cmp	r2, #37	; 0x25
 8000c00:	d1f9      	bne.n	8000bf6 <_vfiprintf_r+0x7a>
 8000c02:	ebba 0b04 	subs.w	fp, sl, r4
 8000c06:	d00b      	beq.n	8000c20 <_vfiprintf_r+0xa4>
 8000c08:	465b      	mov	r3, fp
 8000c0a:	4622      	mov	r2, r4
 8000c0c:	4629      	mov	r1, r5
 8000c0e:	4630      	mov	r0, r6
 8000c10:	f7ff ffa1 	bl	8000b56 <__sfputs_r>
 8000c14:	3001      	adds	r0, #1
 8000c16:	f000 80a9 	beq.w	8000d6c <_vfiprintf_r+0x1f0>
 8000c1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000c1c:	445a      	add	r2, fp
 8000c1e:	9209      	str	r2, [sp, #36]	; 0x24
 8000c20:	f89a 3000 	ldrb.w	r3, [sl]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	f000 80a1 	beq.w	8000d6c <_vfiprintf_r+0x1f0>
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000c34:	f10a 0a01 	add.w	sl, sl, #1
 8000c38:	9304      	str	r3, [sp, #16]
 8000c3a:	9307      	str	r3, [sp, #28]
 8000c3c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000c40:	931a      	str	r3, [sp, #104]	; 0x68
 8000c42:	4654      	mov	r4, sl
 8000c44:	2205      	movs	r2, #5
 8000c46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c4a:	4854      	ldr	r0, [pc, #336]	; (8000d9c <_vfiprintf_r+0x220>)
 8000c4c:	f7ff fac8 	bl	80001e0 <memchr>
 8000c50:	9a04      	ldr	r2, [sp, #16]
 8000c52:	b9d8      	cbnz	r0, 8000c8c <_vfiprintf_r+0x110>
 8000c54:	06d1      	lsls	r1, r2, #27
 8000c56:	bf44      	itt	mi
 8000c58:	2320      	movmi	r3, #32
 8000c5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000c5e:	0713      	lsls	r3, r2, #28
 8000c60:	bf44      	itt	mi
 8000c62:	232b      	movmi	r3, #43	; 0x2b
 8000c64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000c68:	f89a 3000 	ldrb.w	r3, [sl]
 8000c6c:	2b2a      	cmp	r3, #42	; 0x2a
 8000c6e:	d015      	beq.n	8000c9c <_vfiprintf_r+0x120>
 8000c70:	9a07      	ldr	r2, [sp, #28]
 8000c72:	4654      	mov	r4, sl
 8000c74:	2000      	movs	r0, #0
 8000c76:	f04f 0c0a 	mov.w	ip, #10
 8000c7a:	4621      	mov	r1, r4
 8000c7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000c80:	3b30      	subs	r3, #48	; 0x30
 8000c82:	2b09      	cmp	r3, #9
 8000c84:	d94d      	bls.n	8000d22 <_vfiprintf_r+0x1a6>
 8000c86:	b1b0      	cbz	r0, 8000cb6 <_vfiprintf_r+0x13a>
 8000c88:	9207      	str	r2, [sp, #28]
 8000c8a:	e014      	b.n	8000cb6 <_vfiprintf_r+0x13a>
 8000c8c:	eba0 0308 	sub.w	r3, r0, r8
 8000c90:	fa09 f303 	lsl.w	r3, r9, r3
 8000c94:	4313      	orrs	r3, r2
 8000c96:	9304      	str	r3, [sp, #16]
 8000c98:	46a2      	mov	sl, r4
 8000c9a:	e7d2      	b.n	8000c42 <_vfiprintf_r+0xc6>
 8000c9c:	9b03      	ldr	r3, [sp, #12]
 8000c9e:	1d19      	adds	r1, r3, #4
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	9103      	str	r1, [sp, #12]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	bfbb      	ittet	lt
 8000ca8:	425b      	neglt	r3, r3
 8000caa:	f042 0202 	orrlt.w	r2, r2, #2
 8000cae:	9307      	strge	r3, [sp, #28]
 8000cb0:	9307      	strlt	r3, [sp, #28]
 8000cb2:	bfb8      	it	lt
 8000cb4:	9204      	strlt	r2, [sp, #16]
 8000cb6:	7823      	ldrb	r3, [r4, #0]
 8000cb8:	2b2e      	cmp	r3, #46	; 0x2e
 8000cba:	d10c      	bne.n	8000cd6 <_vfiprintf_r+0x15a>
 8000cbc:	7863      	ldrb	r3, [r4, #1]
 8000cbe:	2b2a      	cmp	r3, #42	; 0x2a
 8000cc0:	d134      	bne.n	8000d2c <_vfiprintf_r+0x1b0>
 8000cc2:	9b03      	ldr	r3, [sp, #12]
 8000cc4:	1d1a      	adds	r2, r3, #4
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	9203      	str	r2, [sp, #12]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	bfb8      	it	lt
 8000cce:	f04f 33ff 	movlt.w	r3, #4294967295
 8000cd2:	3402      	adds	r4, #2
 8000cd4:	9305      	str	r3, [sp, #20]
 8000cd6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8000dac <_vfiprintf_r+0x230>
 8000cda:	7821      	ldrb	r1, [r4, #0]
 8000cdc:	2203      	movs	r2, #3
 8000cde:	4650      	mov	r0, sl
 8000ce0:	f7ff fa7e 	bl	80001e0 <memchr>
 8000ce4:	b138      	cbz	r0, 8000cf6 <_vfiprintf_r+0x17a>
 8000ce6:	9b04      	ldr	r3, [sp, #16]
 8000ce8:	eba0 000a 	sub.w	r0, r0, sl
 8000cec:	2240      	movs	r2, #64	; 0x40
 8000cee:	4082      	lsls	r2, r0
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	3401      	adds	r4, #1
 8000cf4:	9304      	str	r3, [sp, #16]
 8000cf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000cfa:	4829      	ldr	r0, [pc, #164]	; (8000da0 <_vfiprintf_r+0x224>)
 8000cfc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000d00:	2206      	movs	r2, #6
 8000d02:	f7ff fa6d 	bl	80001e0 <memchr>
 8000d06:	2800      	cmp	r0, #0
 8000d08:	d03f      	beq.n	8000d8a <_vfiprintf_r+0x20e>
 8000d0a:	4b26      	ldr	r3, [pc, #152]	; (8000da4 <_vfiprintf_r+0x228>)
 8000d0c:	bb1b      	cbnz	r3, 8000d56 <_vfiprintf_r+0x1da>
 8000d0e:	9b03      	ldr	r3, [sp, #12]
 8000d10:	3307      	adds	r3, #7
 8000d12:	f023 0307 	bic.w	r3, r3, #7
 8000d16:	3308      	adds	r3, #8
 8000d18:	9303      	str	r3, [sp, #12]
 8000d1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000d1c:	443b      	add	r3, r7
 8000d1e:	9309      	str	r3, [sp, #36]	; 0x24
 8000d20:	e768      	b.n	8000bf4 <_vfiprintf_r+0x78>
 8000d22:	fb0c 3202 	mla	r2, ip, r2, r3
 8000d26:	460c      	mov	r4, r1
 8000d28:	2001      	movs	r0, #1
 8000d2a:	e7a6      	b.n	8000c7a <_vfiprintf_r+0xfe>
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	3401      	adds	r4, #1
 8000d30:	9305      	str	r3, [sp, #20]
 8000d32:	4619      	mov	r1, r3
 8000d34:	f04f 0c0a 	mov.w	ip, #10
 8000d38:	4620      	mov	r0, r4
 8000d3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000d3e:	3a30      	subs	r2, #48	; 0x30
 8000d40:	2a09      	cmp	r2, #9
 8000d42:	d903      	bls.n	8000d4c <_vfiprintf_r+0x1d0>
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d0c6      	beq.n	8000cd6 <_vfiprintf_r+0x15a>
 8000d48:	9105      	str	r1, [sp, #20]
 8000d4a:	e7c4      	b.n	8000cd6 <_vfiprintf_r+0x15a>
 8000d4c:	fb0c 2101 	mla	r1, ip, r1, r2
 8000d50:	4604      	mov	r4, r0
 8000d52:	2301      	movs	r3, #1
 8000d54:	e7f0      	b.n	8000d38 <_vfiprintf_r+0x1bc>
 8000d56:	ab03      	add	r3, sp, #12
 8000d58:	9300      	str	r3, [sp, #0]
 8000d5a:	462a      	mov	r2, r5
 8000d5c:	4b12      	ldr	r3, [pc, #72]	; (8000da8 <_vfiprintf_r+0x22c>)
 8000d5e:	a904      	add	r1, sp, #16
 8000d60:	4630      	mov	r0, r6
 8000d62:	f3af 8000 	nop.w
 8000d66:	4607      	mov	r7, r0
 8000d68:	1c78      	adds	r0, r7, #1
 8000d6a:	d1d6      	bne.n	8000d1a <_vfiprintf_r+0x19e>
 8000d6c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000d6e:	07d9      	lsls	r1, r3, #31
 8000d70:	d405      	bmi.n	8000d7e <_vfiprintf_r+0x202>
 8000d72:	89ab      	ldrh	r3, [r5, #12]
 8000d74:	059a      	lsls	r2, r3, #22
 8000d76:	d402      	bmi.n	8000d7e <_vfiprintf_r+0x202>
 8000d78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000d7a:	f7ff fddc 	bl	8000936 <__retarget_lock_release_recursive>
 8000d7e:	89ab      	ldrh	r3, [r5, #12]
 8000d80:	065b      	lsls	r3, r3, #25
 8000d82:	f53f af1d 	bmi.w	8000bc0 <_vfiprintf_r+0x44>
 8000d86:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000d88:	e71c      	b.n	8000bc4 <_vfiprintf_r+0x48>
 8000d8a:	ab03      	add	r3, sp, #12
 8000d8c:	9300      	str	r3, [sp, #0]
 8000d8e:	462a      	mov	r2, r5
 8000d90:	4b05      	ldr	r3, [pc, #20]	; (8000da8 <_vfiprintf_r+0x22c>)
 8000d92:	a904      	add	r1, sp, #16
 8000d94:	4630      	mov	r0, r6
 8000d96:	f000 f879 	bl	8000e8c <_printf_i>
 8000d9a:	e7e4      	b.n	8000d66 <_vfiprintf_r+0x1ea>
 8000d9c:	080014af 	.word	0x080014af
 8000da0:	080014b9 	.word	0x080014b9
 8000da4:	00000000 	.word	0x00000000
 8000da8:	08000b57 	.word	0x08000b57
 8000dac:	080014b5 	.word	0x080014b5

08000db0 <_printf_common>:
 8000db0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000db4:	4616      	mov	r6, r2
 8000db6:	4699      	mov	r9, r3
 8000db8:	688a      	ldr	r2, [r1, #8]
 8000dba:	690b      	ldr	r3, [r1, #16]
 8000dbc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	bfb8      	it	lt
 8000dc4:	4613      	movlt	r3, r2
 8000dc6:	6033      	str	r3, [r6, #0]
 8000dc8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000dcc:	4607      	mov	r7, r0
 8000dce:	460c      	mov	r4, r1
 8000dd0:	b10a      	cbz	r2, 8000dd6 <_printf_common+0x26>
 8000dd2:	3301      	adds	r3, #1
 8000dd4:	6033      	str	r3, [r6, #0]
 8000dd6:	6823      	ldr	r3, [r4, #0]
 8000dd8:	0699      	lsls	r1, r3, #26
 8000dda:	bf42      	ittt	mi
 8000ddc:	6833      	ldrmi	r3, [r6, #0]
 8000dde:	3302      	addmi	r3, #2
 8000de0:	6033      	strmi	r3, [r6, #0]
 8000de2:	6825      	ldr	r5, [r4, #0]
 8000de4:	f015 0506 	ands.w	r5, r5, #6
 8000de8:	d106      	bne.n	8000df8 <_printf_common+0x48>
 8000dea:	f104 0a19 	add.w	sl, r4, #25
 8000dee:	68e3      	ldr	r3, [r4, #12]
 8000df0:	6832      	ldr	r2, [r6, #0]
 8000df2:	1a9b      	subs	r3, r3, r2
 8000df4:	42ab      	cmp	r3, r5
 8000df6:	dc26      	bgt.n	8000e46 <_printf_common+0x96>
 8000df8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000dfc:	1e13      	subs	r3, r2, #0
 8000dfe:	6822      	ldr	r2, [r4, #0]
 8000e00:	bf18      	it	ne
 8000e02:	2301      	movne	r3, #1
 8000e04:	0692      	lsls	r2, r2, #26
 8000e06:	d42b      	bmi.n	8000e60 <_printf_common+0xb0>
 8000e08:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000e0c:	4649      	mov	r1, r9
 8000e0e:	4638      	mov	r0, r7
 8000e10:	47c0      	blx	r8
 8000e12:	3001      	adds	r0, #1
 8000e14:	d01e      	beq.n	8000e54 <_printf_common+0xa4>
 8000e16:	6823      	ldr	r3, [r4, #0]
 8000e18:	6922      	ldr	r2, [r4, #16]
 8000e1a:	f003 0306 	and.w	r3, r3, #6
 8000e1e:	2b04      	cmp	r3, #4
 8000e20:	bf02      	ittt	eq
 8000e22:	68e5      	ldreq	r5, [r4, #12]
 8000e24:	6833      	ldreq	r3, [r6, #0]
 8000e26:	1aed      	subeq	r5, r5, r3
 8000e28:	68a3      	ldr	r3, [r4, #8]
 8000e2a:	bf0c      	ite	eq
 8000e2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000e30:	2500      	movne	r5, #0
 8000e32:	4293      	cmp	r3, r2
 8000e34:	bfc4      	itt	gt
 8000e36:	1a9b      	subgt	r3, r3, r2
 8000e38:	18ed      	addgt	r5, r5, r3
 8000e3a:	2600      	movs	r6, #0
 8000e3c:	341a      	adds	r4, #26
 8000e3e:	42b5      	cmp	r5, r6
 8000e40:	d11a      	bne.n	8000e78 <_printf_common+0xc8>
 8000e42:	2000      	movs	r0, #0
 8000e44:	e008      	b.n	8000e58 <_printf_common+0xa8>
 8000e46:	2301      	movs	r3, #1
 8000e48:	4652      	mov	r2, sl
 8000e4a:	4649      	mov	r1, r9
 8000e4c:	4638      	mov	r0, r7
 8000e4e:	47c0      	blx	r8
 8000e50:	3001      	adds	r0, #1
 8000e52:	d103      	bne.n	8000e5c <_printf_common+0xac>
 8000e54:	f04f 30ff 	mov.w	r0, #4294967295
 8000e58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5c:	3501      	adds	r5, #1
 8000e5e:	e7c6      	b.n	8000dee <_printf_common+0x3e>
 8000e60:	18e1      	adds	r1, r4, r3
 8000e62:	1c5a      	adds	r2, r3, #1
 8000e64:	2030      	movs	r0, #48	; 0x30
 8000e66:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000e6a:	4422      	add	r2, r4
 8000e6c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000e70:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000e74:	3302      	adds	r3, #2
 8000e76:	e7c7      	b.n	8000e08 <_printf_common+0x58>
 8000e78:	2301      	movs	r3, #1
 8000e7a:	4622      	mov	r2, r4
 8000e7c:	4649      	mov	r1, r9
 8000e7e:	4638      	mov	r0, r7
 8000e80:	47c0      	blx	r8
 8000e82:	3001      	adds	r0, #1
 8000e84:	d0e6      	beq.n	8000e54 <_printf_common+0xa4>
 8000e86:	3601      	adds	r6, #1
 8000e88:	e7d9      	b.n	8000e3e <_printf_common+0x8e>
	...

08000e8c <_printf_i>:
 8000e8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000e90:	7e0f      	ldrb	r7, [r1, #24]
 8000e92:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000e94:	2f78      	cmp	r7, #120	; 0x78
 8000e96:	4691      	mov	r9, r2
 8000e98:	4680      	mov	r8, r0
 8000e9a:	460c      	mov	r4, r1
 8000e9c:	469a      	mov	sl, r3
 8000e9e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8000ea2:	d807      	bhi.n	8000eb4 <_printf_i+0x28>
 8000ea4:	2f62      	cmp	r7, #98	; 0x62
 8000ea6:	d80a      	bhi.n	8000ebe <_printf_i+0x32>
 8000ea8:	2f00      	cmp	r7, #0
 8000eaa:	f000 80d4 	beq.w	8001056 <_printf_i+0x1ca>
 8000eae:	2f58      	cmp	r7, #88	; 0x58
 8000eb0:	f000 80c0 	beq.w	8001034 <_printf_i+0x1a8>
 8000eb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000eb8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000ebc:	e03a      	b.n	8000f34 <_printf_i+0xa8>
 8000ebe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000ec2:	2b15      	cmp	r3, #21
 8000ec4:	d8f6      	bhi.n	8000eb4 <_printf_i+0x28>
 8000ec6:	a101      	add	r1, pc, #4	; (adr r1, 8000ecc <_printf_i+0x40>)
 8000ec8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000ecc:	08000f25 	.word	0x08000f25
 8000ed0:	08000f39 	.word	0x08000f39
 8000ed4:	08000eb5 	.word	0x08000eb5
 8000ed8:	08000eb5 	.word	0x08000eb5
 8000edc:	08000eb5 	.word	0x08000eb5
 8000ee0:	08000eb5 	.word	0x08000eb5
 8000ee4:	08000f39 	.word	0x08000f39
 8000ee8:	08000eb5 	.word	0x08000eb5
 8000eec:	08000eb5 	.word	0x08000eb5
 8000ef0:	08000eb5 	.word	0x08000eb5
 8000ef4:	08000eb5 	.word	0x08000eb5
 8000ef8:	0800103d 	.word	0x0800103d
 8000efc:	08000f65 	.word	0x08000f65
 8000f00:	08000ff7 	.word	0x08000ff7
 8000f04:	08000eb5 	.word	0x08000eb5
 8000f08:	08000eb5 	.word	0x08000eb5
 8000f0c:	0800105f 	.word	0x0800105f
 8000f10:	08000eb5 	.word	0x08000eb5
 8000f14:	08000f65 	.word	0x08000f65
 8000f18:	08000eb5 	.word	0x08000eb5
 8000f1c:	08000eb5 	.word	0x08000eb5
 8000f20:	08000fff 	.word	0x08000fff
 8000f24:	682b      	ldr	r3, [r5, #0]
 8000f26:	1d1a      	adds	r2, r3, #4
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	602a      	str	r2, [r5, #0]
 8000f2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000f30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000f34:	2301      	movs	r3, #1
 8000f36:	e09f      	b.n	8001078 <_printf_i+0x1ec>
 8000f38:	6820      	ldr	r0, [r4, #0]
 8000f3a:	682b      	ldr	r3, [r5, #0]
 8000f3c:	0607      	lsls	r7, r0, #24
 8000f3e:	f103 0104 	add.w	r1, r3, #4
 8000f42:	6029      	str	r1, [r5, #0]
 8000f44:	d501      	bpl.n	8000f4a <_printf_i+0xbe>
 8000f46:	681e      	ldr	r6, [r3, #0]
 8000f48:	e003      	b.n	8000f52 <_printf_i+0xc6>
 8000f4a:	0646      	lsls	r6, r0, #25
 8000f4c:	d5fb      	bpl.n	8000f46 <_printf_i+0xba>
 8000f4e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8000f52:	2e00      	cmp	r6, #0
 8000f54:	da03      	bge.n	8000f5e <_printf_i+0xd2>
 8000f56:	232d      	movs	r3, #45	; 0x2d
 8000f58:	4276      	negs	r6, r6
 8000f5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000f5e:	485a      	ldr	r0, [pc, #360]	; (80010c8 <_printf_i+0x23c>)
 8000f60:	230a      	movs	r3, #10
 8000f62:	e012      	b.n	8000f8a <_printf_i+0xfe>
 8000f64:	682b      	ldr	r3, [r5, #0]
 8000f66:	6820      	ldr	r0, [r4, #0]
 8000f68:	1d19      	adds	r1, r3, #4
 8000f6a:	6029      	str	r1, [r5, #0]
 8000f6c:	0605      	lsls	r5, r0, #24
 8000f6e:	d501      	bpl.n	8000f74 <_printf_i+0xe8>
 8000f70:	681e      	ldr	r6, [r3, #0]
 8000f72:	e002      	b.n	8000f7a <_printf_i+0xee>
 8000f74:	0641      	lsls	r1, r0, #25
 8000f76:	d5fb      	bpl.n	8000f70 <_printf_i+0xe4>
 8000f78:	881e      	ldrh	r6, [r3, #0]
 8000f7a:	4853      	ldr	r0, [pc, #332]	; (80010c8 <_printf_i+0x23c>)
 8000f7c:	2f6f      	cmp	r7, #111	; 0x6f
 8000f7e:	bf0c      	ite	eq
 8000f80:	2308      	moveq	r3, #8
 8000f82:	230a      	movne	r3, #10
 8000f84:	2100      	movs	r1, #0
 8000f86:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000f8a:	6865      	ldr	r5, [r4, #4]
 8000f8c:	60a5      	str	r5, [r4, #8]
 8000f8e:	2d00      	cmp	r5, #0
 8000f90:	bfa2      	ittt	ge
 8000f92:	6821      	ldrge	r1, [r4, #0]
 8000f94:	f021 0104 	bicge.w	r1, r1, #4
 8000f98:	6021      	strge	r1, [r4, #0]
 8000f9a:	b90e      	cbnz	r6, 8000fa0 <_printf_i+0x114>
 8000f9c:	2d00      	cmp	r5, #0
 8000f9e:	d04b      	beq.n	8001038 <_printf_i+0x1ac>
 8000fa0:	4615      	mov	r5, r2
 8000fa2:	fbb6 f1f3 	udiv	r1, r6, r3
 8000fa6:	fb03 6711 	mls	r7, r3, r1, r6
 8000faa:	5dc7      	ldrb	r7, [r0, r7]
 8000fac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8000fb0:	4637      	mov	r7, r6
 8000fb2:	42bb      	cmp	r3, r7
 8000fb4:	460e      	mov	r6, r1
 8000fb6:	d9f4      	bls.n	8000fa2 <_printf_i+0x116>
 8000fb8:	2b08      	cmp	r3, #8
 8000fba:	d10b      	bne.n	8000fd4 <_printf_i+0x148>
 8000fbc:	6823      	ldr	r3, [r4, #0]
 8000fbe:	07de      	lsls	r6, r3, #31
 8000fc0:	d508      	bpl.n	8000fd4 <_printf_i+0x148>
 8000fc2:	6923      	ldr	r3, [r4, #16]
 8000fc4:	6861      	ldr	r1, [r4, #4]
 8000fc6:	4299      	cmp	r1, r3
 8000fc8:	bfde      	ittt	le
 8000fca:	2330      	movle	r3, #48	; 0x30
 8000fcc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8000fd0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8000fd4:	1b52      	subs	r2, r2, r5
 8000fd6:	6122      	str	r2, [r4, #16]
 8000fd8:	f8cd a000 	str.w	sl, [sp]
 8000fdc:	464b      	mov	r3, r9
 8000fde:	aa03      	add	r2, sp, #12
 8000fe0:	4621      	mov	r1, r4
 8000fe2:	4640      	mov	r0, r8
 8000fe4:	f7ff fee4 	bl	8000db0 <_printf_common>
 8000fe8:	3001      	adds	r0, #1
 8000fea:	d14a      	bne.n	8001082 <_printf_i+0x1f6>
 8000fec:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff0:	b004      	add	sp, #16
 8000ff2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ff6:	6823      	ldr	r3, [r4, #0]
 8000ff8:	f043 0320 	orr.w	r3, r3, #32
 8000ffc:	6023      	str	r3, [r4, #0]
 8000ffe:	4833      	ldr	r0, [pc, #204]	; (80010cc <_printf_i+0x240>)
 8001000:	2778      	movs	r7, #120	; 0x78
 8001002:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001006:	6823      	ldr	r3, [r4, #0]
 8001008:	6829      	ldr	r1, [r5, #0]
 800100a:	061f      	lsls	r7, r3, #24
 800100c:	f851 6b04 	ldr.w	r6, [r1], #4
 8001010:	d402      	bmi.n	8001018 <_printf_i+0x18c>
 8001012:	065f      	lsls	r7, r3, #25
 8001014:	bf48      	it	mi
 8001016:	b2b6      	uxthmi	r6, r6
 8001018:	07df      	lsls	r7, r3, #31
 800101a:	bf48      	it	mi
 800101c:	f043 0320 	orrmi.w	r3, r3, #32
 8001020:	6029      	str	r1, [r5, #0]
 8001022:	bf48      	it	mi
 8001024:	6023      	strmi	r3, [r4, #0]
 8001026:	b91e      	cbnz	r6, 8001030 <_printf_i+0x1a4>
 8001028:	6823      	ldr	r3, [r4, #0]
 800102a:	f023 0320 	bic.w	r3, r3, #32
 800102e:	6023      	str	r3, [r4, #0]
 8001030:	2310      	movs	r3, #16
 8001032:	e7a7      	b.n	8000f84 <_printf_i+0xf8>
 8001034:	4824      	ldr	r0, [pc, #144]	; (80010c8 <_printf_i+0x23c>)
 8001036:	e7e4      	b.n	8001002 <_printf_i+0x176>
 8001038:	4615      	mov	r5, r2
 800103a:	e7bd      	b.n	8000fb8 <_printf_i+0x12c>
 800103c:	682b      	ldr	r3, [r5, #0]
 800103e:	6826      	ldr	r6, [r4, #0]
 8001040:	6961      	ldr	r1, [r4, #20]
 8001042:	1d18      	adds	r0, r3, #4
 8001044:	6028      	str	r0, [r5, #0]
 8001046:	0635      	lsls	r5, r6, #24
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	d501      	bpl.n	8001050 <_printf_i+0x1c4>
 800104c:	6019      	str	r1, [r3, #0]
 800104e:	e002      	b.n	8001056 <_printf_i+0x1ca>
 8001050:	0670      	lsls	r0, r6, #25
 8001052:	d5fb      	bpl.n	800104c <_printf_i+0x1c0>
 8001054:	8019      	strh	r1, [r3, #0]
 8001056:	2300      	movs	r3, #0
 8001058:	6123      	str	r3, [r4, #16]
 800105a:	4615      	mov	r5, r2
 800105c:	e7bc      	b.n	8000fd8 <_printf_i+0x14c>
 800105e:	682b      	ldr	r3, [r5, #0]
 8001060:	1d1a      	adds	r2, r3, #4
 8001062:	602a      	str	r2, [r5, #0]
 8001064:	681d      	ldr	r5, [r3, #0]
 8001066:	6862      	ldr	r2, [r4, #4]
 8001068:	2100      	movs	r1, #0
 800106a:	4628      	mov	r0, r5
 800106c:	f7ff f8b8 	bl	80001e0 <memchr>
 8001070:	b108      	cbz	r0, 8001076 <_printf_i+0x1ea>
 8001072:	1b40      	subs	r0, r0, r5
 8001074:	6060      	str	r0, [r4, #4]
 8001076:	6863      	ldr	r3, [r4, #4]
 8001078:	6123      	str	r3, [r4, #16]
 800107a:	2300      	movs	r3, #0
 800107c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001080:	e7aa      	b.n	8000fd8 <_printf_i+0x14c>
 8001082:	6923      	ldr	r3, [r4, #16]
 8001084:	462a      	mov	r2, r5
 8001086:	4649      	mov	r1, r9
 8001088:	4640      	mov	r0, r8
 800108a:	47d0      	blx	sl
 800108c:	3001      	adds	r0, #1
 800108e:	d0ad      	beq.n	8000fec <_printf_i+0x160>
 8001090:	6823      	ldr	r3, [r4, #0]
 8001092:	079b      	lsls	r3, r3, #30
 8001094:	d413      	bmi.n	80010be <_printf_i+0x232>
 8001096:	68e0      	ldr	r0, [r4, #12]
 8001098:	9b03      	ldr	r3, [sp, #12]
 800109a:	4298      	cmp	r0, r3
 800109c:	bfb8      	it	lt
 800109e:	4618      	movlt	r0, r3
 80010a0:	e7a6      	b.n	8000ff0 <_printf_i+0x164>
 80010a2:	2301      	movs	r3, #1
 80010a4:	4632      	mov	r2, r6
 80010a6:	4649      	mov	r1, r9
 80010a8:	4640      	mov	r0, r8
 80010aa:	47d0      	blx	sl
 80010ac:	3001      	adds	r0, #1
 80010ae:	d09d      	beq.n	8000fec <_printf_i+0x160>
 80010b0:	3501      	adds	r5, #1
 80010b2:	68e3      	ldr	r3, [r4, #12]
 80010b4:	9903      	ldr	r1, [sp, #12]
 80010b6:	1a5b      	subs	r3, r3, r1
 80010b8:	42ab      	cmp	r3, r5
 80010ba:	dcf2      	bgt.n	80010a2 <_printf_i+0x216>
 80010bc:	e7eb      	b.n	8001096 <_printf_i+0x20a>
 80010be:	2500      	movs	r5, #0
 80010c0:	f104 0619 	add.w	r6, r4, #25
 80010c4:	e7f5      	b.n	80010b2 <_printf_i+0x226>
 80010c6:	bf00      	nop
 80010c8:	080014c0 	.word	0x080014c0
 80010cc:	080014d1 	.word	0x080014d1

080010d0 <__sflush_r>:
 80010d0:	898a      	ldrh	r2, [r1, #12]
 80010d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80010d6:	4605      	mov	r5, r0
 80010d8:	0710      	lsls	r0, r2, #28
 80010da:	460c      	mov	r4, r1
 80010dc:	d458      	bmi.n	8001190 <__sflush_r+0xc0>
 80010de:	684b      	ldr	r3, [r1, #4]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	dc05      	bgt.n	80010f0 <__sflush_r+0x20>
 80010e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	dc02      	bgt.n	80010f0 <__sflush_r+0x20>
 80010ea:	2000      	movs	r0, #0
 80010ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80010f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80010f2:	2e00      	cmp	r6, #0
 80010f4:	d0f9      	beq.n	80010ea <__sflush_r+0x1a>
 80010f6:	2300      	movs	r3, #0
 80010f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80010fc:	682f      	ldr	r7, [r5, #0]
 80010fe:	6a21      	ldr	r1, [r4, #32]
 8001100:	602b      	str	r3, [r5, #0]
 8001102:	d032      	beq.n	800116a <__sflush_r+0x9a>
 8001104:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001106:	89a3      	ldrh	r3, [r4, #12]
 8001108:	075a      	lsls	r2, r3, #29
 800110a:	d505      	bpl.n	8001118 <__sflush_r+0x48>
 800110c:	6863      	ldr	r3, [r4, #4]
 800110e:	1ac0      	subs	r0, r0, r3
 8001110:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001112:	b10b      	cbz	r3, 8001118 <__sflush_r+0x48>
 8001114:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001116:	1ac0      	subs	r0, r0, r3
 8001118:	2300      	movs	r3, #0
 800111a:	4602      	mov	r2, r0
 800111c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800111e:	6a21      	ldr	r1, [r4, #32]
 8001120:	4628      	mov	r0, r5
 8001122:	47b0      	blx	r6
 8001124:	1c43      	adds	r3, r0, #1
 8001126:	89a3      	ldrh	r3, [r4, #12]
 8001128:	d106      	bne.n	8001138 <__sflush_r+0x68>
 800112a:	6829      	ldr	r1, [r5, #0]
 800112c:	291d      	cmp	r1, #29
 800112e:	d82b      	bhi.n	8001188 <__sflush_r+0xb8>
 8001130:	4a29      	ldr	r2, [pc, #164]	; (80011d8 <__sflush_r+0x108>)
 8001132:	410a      	asrs	r2, r1
 8001134:	07d6      	lsls	r6, r2, #31
 8001136:	d427      	bmi.n	8001188 <__sflush_r+0xb8>
 8001138:	2200      	movs	r2, #0
 800113a:	6062      	str	r2, [r4, #4]
 800113c:	04d9      	lsls	r1, r3, #19
 800113e:	6922      	ldr	r2, [r4, #16]
 8001140:	6022      	str	r2, [r4, #0]
 8001142:	d504      	bpl.n	800114e <__sflush_r+0x7e>
 8001144:	1c42      	adds	r2, r0, #1
 8001146:	d101      	bne.n	800114c <__sflush_r+0x7c>
 8001148:	682b      	ldr	r3, [r5, #0]
 800114a:	b903      	cbnz	r3, 800114e <__sflush_r+0x7e>
 800114c:	6560      	str	r0, [r4, #84]	; 0x54
 800114e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001150:	602f      	str	r7, [r5, #0]
 8001152:	2900      	cmp	r1, #0
 8001154:	d0c9      	beq.n	80010ea <__sflush_r+0x1a>
 8001156:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800115a:	4299      	cmp	r1, r3
 800115c:	d002      	beq.n	8001164 <__sflush_r+0x94>
 800115e:	4628      	mov	r0, r5
 8001160:	f7ff fbea 	bl	8000938 <_free_r>
 8001164:	2000      	movs	r0, #0
 8001166:	6360      	str	r0, [r4, #52]	; 0x34
 8001168:	e7c0      	b.n	80010ec <__sflush_r+0x1c>
 800116a:	2301      	movs	r3, #1
 800116c:	4628      	mov	r0, r5
 800116e:	47b0      	blx	r6
 8001170:	1c41      	adds	r1, r0, #1
 8001172:	d1c8      	bne.n	8001106 <__sflush_r+0x36>
 8001174:	682b      	ldr	r3, [r5, #0]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d0c5      	beq.n	8001106 <__sflush_r+0x36>
 800117a:	2b1d      	cmp	r3, #29
 800117c:	d001      	beq.n	8001182 <__sflush_r+0xb2>
 800117e:	2b16      	cmp	r3, #22
 8001180:	d101      	bne.n	8001186 <__sflush_r+0xb6>
 8001182:	602f      	str	r7, [r5, #0]
 8001184:	e7b1      	b.n	80010ea <__sflush_r+0x1a>
 8001186:	89a3      	ldrh	r3, [r4, #12]
 8001188:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800118c:	81a3      	strh	r3, [r4, #12]
 800118e:	e7ad      	b.n	80010ec <__sflush_r+0x1c>
 8001190:	690f      	ldr	r7, [r1, #16]
 8001192:	2f00      	cmp	r7, #0
 8001194:	d0a9      	beq.n	80010ea <__sflush_r+0x1a>
 8001196:	0793      	lsls	r3, r2, #30
 8001198:	680e      	ldr	r6, [r1, #0]
 800119a:	bf08      	it	eq
 800119c:	694b      	ldreq	r3, [r1, #20]
 800119e:	600f      	str	r7, [r1, #0]
 80011a0:	bf18      	it	ne
 80011a2:	2300      	movne	r3, #0
 80011a4:	eba6 0807 	sub.w	r8, r6, r7
 80011a8:	608b      	str	r3, [r1, #8]
 80011aa:	f1b8 0f00 	cmp.w	r8, #0
 80011ae:	dd9c      	ble.n	80010ea <__sflush_r+0x1a>
 80011b0:	6a21      	ldr	r1, [r4, #32]
 80011b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80011b4:	4643      	mov	r3, r8
 80011b6:	463a      	mov	r2, r7
 80011b8:	4628      	mov	r0, r5
 80011ba:	47b0      	blx	r6
 80011bc:	2800      	cmp	r0, #0
 80011be:	dc06      	bgt.n	80011ce <__sflush_r+0xfe>
 80011c0:	89a3      	ldrh	r3, [r4, #12]
 80011c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011c6:	81a3      	strh	r3, [r4, #12]
 80011c8:	f04f 30ff 	mov.w	r0, #4294967295
 80011cc:	e78e      	b.n	80010ec <__sflush_r+0x1c>
 80011ce:	4407      	add	r7, r0
 80011d0:	eba8 0800 	sub.w	r8, r8, r0
 80011d4:	e7e9      	b.n	80011aa <__sflush_r+0xda>
 80011d6:	bf00      	nop
 80011d8:	dfbffffe 	.word	0xdfbffffe

080011dc <_fflush_r>:
 80011dc:	b538      	push	{r3, r4, r5, lr}
 80011de:	690b      	ldr	r3, [r1, #16]
 80011e0:	4605      	mov	r5, r0
 80011e2:	460c      	mov	r4, r1
 80011e4:	b913      	cbnz	r3, 80011ec <_fflush_r+0x10>
 80011e6:	2500      	movs	r5, #0
 80011e8:	4628      	mov	r0, r5
 80011ea:	bd38      	pop	{r3, r4, r5, pc}
 80011ec:	b118      	cbz	r0, 80011f6 <_fflush_r+0x1a>
 80011ee:	6a03      	ldr	r3, [r0, #32]
 80011f0:	b90b      	cbnz	r3, 80011f6 <_fflush_r+0x1a>
 80011f2:	f7ff fa9b 	bl	800072c <__sinit>
 80011f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d0f3      	beq.n	80011e6 <_fflush_r+0xa>
 80011fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001200:	07d0      	lsls	r0, r2, #31
 8001202:	d404      	bmi.n	800120e <_fflush_r+0x32>
 8001204:	0599      	lsls	r1, r3, #22
 8001206:	d402      	bmi.n	800120e <_fflush_r+0x32>
 8001208:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800120a:	f7ff fb93 	bl	8000934 <__retarget_lock_acquire_recursive>
 800120e:	4628      	mov	r0, r5
 8001210:	4621      	mov	r1, r4
 8001212:	f7ff ff5d 	bl	80010d0 <__sflush_r>
 8001216:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001218:	07da      	lsls	r2, r3, #31
 800121a:	4605      	mov	r5, r0
 800121c:	d4e4      	bmi.n	80011e8 <_fflush_r+0xc>
 800121e:	89a3      	ldrh	r3, [r4, #12]
 8001220:	059b      	lsls	r3, r3, #22
 8001222:	d4e1      	bmi.n	80011e8 <_fflush_r+0xc>
 8001224:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001226:	f7ff fb86 	bl	8000936 <__retarget_lock_release_recursive>
 800122a:	e7dd      	b.n	80011e8 <_fflush_r+0xc>

0800122c <__swbuf_r>:
 800122c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800122e:	460e      	mov	r6, r1
 8001230:	4614      	mov	r4, r2
 8001232:	4605      	mov	r5, r0
 8001234:	b118      	cbz	r0, 800123e <__swbuf_r+0x12>
 8001236:	6a03      	ldr	r3, [r0, #32]
 8001238:	b90b      	cbnz	r3, 800123e <__swbuf_r+0x12>
 800123a:	f7ff fa77 	bl	800072c <__sinit>
 800123e:	69a3      	ldr	r3, [r4, #24]
 8001240:	60a3      	str	r3, [r4, #8]
 8001242:	89a3      	ldrh	r3, [r4, #12]
 8001244:	071a      	lsls	r2, r3, #28
 8001246:	d525      	bpl.n	8001294 <__swbuf_r+0x68>
 8001248:	6923      	ldr	r3, [r4, #16]
 800124a:	b31b      	cbz	r3, 8001294 <__swbuf_r+0x68>
 800124c:	6823      	ldr	r3, [r4, #0]
 800124e:	6922      	ldr	r2, [r4, #16]
 8001250:	1a98      	subs	r0, r3, r2
 8001252:	6963      	ldr	r3, [r4, #20]
 8001254:	b2f6      	uxtb	r6, r6
 8001256:	4283      	cmp	r3, r0
 8001258:	4637      	mov	r7, r6
 800125a:	dc04      	bgt.n	8001266 <__swbuf_r+0x3a>
 800125c:	4621      	mov	r1, r4
 800125e:	4628      	mov	r0, r5
 8001260:	f7ff ffbc 	bl	80011dc <_fflush_r>
 8001264:	b9e0      	cbnz	r0, 80012a0 <__swbuf_r+0x74>
 8001266:	68a3      	ldr	r3, [r4, #8]
 8001268:	3b01      	subs	r3, #1
 800126a:	60a3      	str	r3, [r4, #8]
 800126c:	6823      	ldr	r3, [r4, #0]
 800126e:	1c5a      	adds	r2, r3, #1
 8001270:	6022      	str	r2, [r4, #0]
 8001272:	701e      	strb	r6, [r3, #0]
 8001274:	6962      	ldr	r2, [r4, #20]
 8001276:	1c43      	adds	r3, r0, #1
 8001278:	429a      	cmp	r2, r3
 800127a:	d004      	beq.n	8001286 <__swbuf_r+0x5a>
 800127c:	89a3      	ldrh	r3, [r4, #12]
 800127e:	07db      	lsls	r3, r3, #31
 8001280:	d506      	bpl.n	8001290 <__swbuf_r+0x64>
 8001282:	2e0a      	cmp	r6, #10
 8001284:	d104      	bne.n	8001290 <__swbuf_r+0x64>
 8001286:	4621      	mov	r1, r4
 8001288:	4628      	mov	r0, r5
 800128a:	f7ff ffa7 	bl	80011dc <_fflush_r>
 800128e:	b938      	cbnz	r0, 80012a0 <__swbuf_r+0x74>
 8001290:	4638      	mov	r0, r7
 8001292:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001294:	4621      	mov	r1, r4
 8001296:	4628      	mov	r0, r5
 8001298:	f000 f806 	bl	80012a8 <__swsetup_r>
 800129c:	2800      	cmp	r0, #0
 800129e:	d0d5      	beq.n	800124c <__swbuf_r+0x20>
 80012a0:	f04f 37ff 	mov.w	r7, #4294967295
 80012a4:	e7f4      	b.n	8001290 <__swbuf_r+0x64>
	...

080012a8 <__swsetup_r>:
 80012a8:	b538      	push	{r3, r4, r5, lr}
 80012aa:	4b2a      	ldr	r3, [pc, #168]	; (8001354 <__swsetup_r+0xac>)
 80012ac:	4605      	mov	r5, r0
 80012ae:	6818      	ldr	r0, [r3, #0]
 80012b0:	460c      	mov	r4, r1
 80012b2:	b118      	cbz	r0, 80012bc <__swsetup_r+0x14>
 80012b4:	6a03      	ldr	r3, [r0, #32]
 80012b6:	b90b      	cbnz	r3, 80012bc <__swsetup_r+0x14>
 80012b8:	f7ff fa38 	bl	800072c <__sinit>
 80012bc:	89a3      	ldrh	r3, [r4, #12]
 80012be:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80012c2:	0718      	lsls	r0, r3, #28
 80012c4:	d422      	bmi.n	800130c <__swsetup_r+0x64>
 80012c6:	06d9      	lsls	r1, r3, #27
 80012c8:	d407      	bmi.n	80012da <__swsetup_r+0x32>
 80012ca:	2309      	movs	r3, #9
 80012cc:	602b      	str	r3, [r5, #0]
 80012ce:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80012d2:	81a3      	strh	r3, [r4, #12]
 80012d4:	f04f 30ff 	mov.w	r0, #4294967295
 80012d8:	e034      	b.n	8001344 <__swsetup_r+0x9c>
 80012da:	0758      	lsls	r0, r3, #29
 80012dc:	d512      	bpl.n	8001304 <__swsetup_r+0x5c>
 80012de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80012e0:	b141      	cbz	r1, 80012f4 <__swsetup_r+0x4c>
 80012e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80012e6:	4299      	cmp	r1, r3
 80012e8:	d002      	beq.n	80012f0 <__swsetup_r+0x48>
 80012ea:	4628      	mov	r0, r5
 80012ec:	f7ff fb24 	bl	8000938 <_free_r>
 80012f0:	2300      	movs	r3, #0
 80012f2:	6363      	str	r3, [r4, #52]	; 0x34
 80012f4:	89a3      	ldrh	r3, [r4, #12]
 80012f6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80012fa:	81a3      	strh	r3, [r4, #12]
 80012fc:	2300      	movs	r3, #0
 80012fe:	6063      	str	r3, [r4, #4]
 8001300:	6923      	ldr	r3, [r4, #16]
 8001302:	6023      	str	r3, [r4, #0]
 8001304:	89a3      	ldrh	r3, [r4, #12]
 8001306:	f043 0308 	orr.w	r3, r3, #8
 800130a:	81a3      	strh	r3, [r4, #12]
 800130c:	6923      	ldr	r3, [r4, #16]
 800130e:	b94b      	cbnz	r3, 8001324 <__swsetup_r+0x7c>
 8001310:	89a3      	ldrh	r3, [r4, #12]
 8001312:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001316:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800131a:	d003      	beq.n	8001324 <__swsetup_r+0x7c>
 800131c:	4621      	mov	r1, r4
 800131e:	4628      	mov	r0, r5
 8001320:	f000 f850 	bl	80013c4 <__smakebuf_r>
 8001324:	89a0      	ldrh	r0, [r4, #12]
 8001326:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800132a:	f010 0301 	ands.w	r3, r0, #1
 800132e:	d00a      	beq.n	8001346 <__swsetup_r+0x9e>
 8001330:	2300      	movs	r3, #0
 8001332:	60a3      	str	r3, [r4, #8]
 8001334:	6963      	ldr	r3, [r4, #20]
 8001336:	425b      	negs	r3, r3
 8001338:	61a3      	str	r3, [r4, #24]
 800133a:	6923      	ldr	r3, [r4, #16]
 800133c:	b943      	cbnz	r3, 8001350 <__swsetup_r+0xa8>
 800133e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001342:	d1c4      	bne.n	80012ce <__swsetup_r+0x26>
 8001344:	bd38      	pop	{r3, r4, r5, pc}
 8001346:	0781      	lsls	r1, r0, #30
 8001348:	bf58      	it	pl
 800134a:	6963      	ldrpl	r3, [r4, #20]
 800134c:	60a3      	str	r3, [r4, #8]
 800134e:	e7f4      	b.n	800133a <__swsetup_r+0x92>
 8001350:	2000      	movs	r0, #0
 8001352:	e7f7      	b.n	8001344 <__swsetup_r+0x9c>
 8001354:	20000058 	.word	0x20000058

08001358 <_sbrk_r>:
 8001358:	b538      	push	{r3, r4, r5, lr}
 800135a:	4d06      	ldr	r5, [pc, #24]	; (8001374 <_sbrk_r+0x1c>)
 800135c:	2300      	movs	r3, #0
 800135e:	4604      	mov	r4, r0
 8001360:	4608      	mov	r0, r1
 8001362:	602b      	str	r3, [r5, #0]
 8001364:	f7ff f84e 	bl	8000404 <_sbrk>
 8001368:	1c43      	adds	r3, r0, #1
 800136a:	d102      	bne.n	8001372 <_sbrk_r+0x1a>
 800136c:	682b      	ldr	r3, [r5, #0]
 800136e:	b103      	cbz	r3, 8001372 <_sbrk_r+0x1a>
 8001370:	6023      	str	r3, [r4, #0]
 8001372:	bd38      	pop	{r3, r4, r5, pc}
 8001374:	200001b8 	.word	0x200001b8

08001378 <__swhatbuf_r>:
 8001378:	b570      	push	{r4, r5, r6, lr}
 800137a:	460c      	mov	r4, r1
 800137c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001380:	2900      	cmp	r1, #0
 8001382:	b096      	sub	sp, #88	; 0x58
 8001384:	4615      	mov	r5, r2
 8001386:	461e      	mov	r6, r3
 8001388:	da0d      	bge.n	80013a6 <__swhatbuf_r+0x2e>
 800138a:	89a3      	ldrh	r3, [r4, #12]
 800138c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001390:	f04f 0100 	mov.w	r1, #0
 8001394:	bf0c      	ite	eq
 8001396:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800139a:	2340      	movne	r3, #64	; 0x40
 800139c:	2000      	movs	r0, #0
 800139e:	6031      	str	r1, [r6, #0]
 80013a0:	602b      	str	r3, [r5, #0]
 80013a2:	b016      	add	sp, #88	; 0x58
 80013a4:	bd70      	pop	{r4, r5, r6, pc}
 80013a6:	466a      	mov	r2, sp
 80013a8:	f000 f848 	bl	800143c <_fstat_r>
 80013ac:	2800      	cmp	r0, #0
 80013ae:	dbec      	blt.n	800138a <__swhatbuf_r+0x12>
 80013b0:	9901      	ldr	r1, [sp, #4]
 80013b2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80013b6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80013ba:	4259      	negs	r1, r3
 80013bc:	4159      	adcs	r1, r3
 80013be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013c2:	e7eb      	b.n	800139c <__swhatbuf_r+0x24>

080013c4 <__smakebuf_r>:
 80013c4:	898b      	ldrh	r3, [r1, #12]
 80013c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80013c8:	079d      	lsls	r5, r3, #30
 80013ca:	4606      	mov	r6, r0
 80013cc:	460c      	mov	r4, r1
 80013ce:	d507      	bpl.n	80013e0 <__smakebuf_r+0x1c>
 80013d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80013d4:	6023      	str	r3, [r4, #0]
 80013d6:	6123      	str	r3, [r4, #16]
 80013d8:	2301      	movs	r3, #1
 80013da:	6163      	str	r3, [r4, #20]
 80013dc:	b002      	add	sp, #8
 80013de:	bd70      	pop	{r4, r5, r6, pc}
 80013e0:	ab01      	add	r3, sp, #4
 80013e2:	466a      	mov	r2, sp
 80013e4:	f7ff ffc8 	bl	8001378 <__swhatbuf_r>
 80013e8:	9900      	ldr	r1, [sp, #0]
 80013ea:	4605      	mov	r5, r0
 80013ec:	4630      	mov	r0, r6
 80013ee:	f7ff fb0f 	bl	8000a10 <_malloc_r>
 80013f2:	b948      	cbnz	r0, 8001408 <__smakebuf_r+0x44>
 80013f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80013f8:	059a      	lsls	r2, r3, #22
 80013fa:	d4ef      	bmi.n	80013dc <__smakebuf_r+0x18>
 80013fc:	f023 0303 	bic.w	r3, r3, #3
 8001400:	f043 0302 	orr.w	r3, r3, #2
 8001404:	81a3      	strh	r3, [r4, #12]
 8001406:	e7e3      	b.n	80013d0 <__smakebuf_r+0xc>
 8001408:	89a3      	ldrh	r3, [r4, #12]
 800140a:	6020      	str	r0, [r4, #0]
 800140c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001410:	81a3      	strh	r3, [r4, #12]
 8001412:	9b00      	ldr	r3, [sp, #0]
 8001414:	6163      	str	r3, [r4, #20]
 8001416:	9b01      	ldr	r3, [sp, #4]
 8001418:	6120      	str	r0, [r4, #16]
 800141a:	b15b      	cbz	r3, 8001434 <__smakebuf_r+0x70>
 800141c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001420:	4630      	mov	r0, r6
 8001422:	f000 f81d 	bl	8001460 <_isatty_r>
 8001426:	b128      	cbz	r0, 8001434 <__smakebuf_r+0x70>
 8001428:	89a3      	ldrh	r3, [r4, #12]
 800142a:	f023 0303 	bic.w	r3, r3, #3
 800142e:	f043 0301 	orr.w	r3, r3, #1
 8001432:	81a3      	strh	r3, [r4, #12]
 8001434:	89a3      	ldrh	r3, [r4, #12]
 8001436:	431d      	orrs	r5, r3
 8001438:	81a5      	strh	r5, [r4, #12]
 800143a:	e7cf      	b.n	80013dc <__smakebuf_r+0x18>

0800143c <_fstat_r>:
 800143c:	b538      	push	{r3, r4, r5, lr}
 800143e:	4d07      	ldr	r5, [pc, #28]	; (800145c <_fstat_r+0x20>)
 8001440:	2300      	movs	r3, #0
 8001442:	4604      	mov	r4, r0
 8001444:	4608      	mov	r0, r1
 8001446:	4611      	mov	r1, r2
 8001448:	602b      	str	r3, [r5, #0]
 800144a:	f7fe ffb2 	bl	80003b2 <_fstat>
 800144e:	1c43      	adds	r3, r0, #1
 8001450:	d102      	bne.n	8001458 <_fstat_r+0x1c>
 8001452:	682b      	ldr	r3, [r5, #0]
 8001454:	b103      	cbz	r3, 8001458 <_fstat_r+0x1c>
 8001456:	6023      	str	r3, [r4, #0]
 8001458:	bd38      	pop	{r3, r4, r5, pc}
 800145a:	bf00      	nop
 800145c:	200001b8 	.word	0x200001b8

08001460 <_isatty_r>:
 8001460:	b538      	push	{r3, r4, r5, lr}
 8001462:	4d06      	ldr	r5, [pc, #24]	; (800147c <_isatty_r+0x1c>)
 8001464:	2300      	movs	r3, #0
 8001466:	4604      	mov	r4, r0
 8001468:	4608      	mov	r0, r1
 800146a:	602b      	str	r3, [r5, #0]
 800146c:	f7fe ffb1 	bl	80003d2 <_isatty>
 8001470:	1c43      	adds	r3, r0, #1
 8001472:	d102      	bne.n	800147a <_isatty_r+0x1a>
 8001474:	682b      	ldr	r3, [r5, #0]
 8001476:	b103      	cbz	r3, 800147a <_isatty_r+0x1a>
 8001478:	6023      	str	r3, [r4, #0]
 800147a:	bd38      	pop	{r3, r4, r5, pc}
 800147c:	200001b8 	.word	0x200001b8

08001480 <_init>:
 8001480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001482:	bf00      	nop
 8001484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001486:	bc08      	pop	{r3}
 8001488:	469e      	mov	lr, r3
 800148a:	4770      	bx	lr

0800148c <_fini>:
 800148c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800148e:	bf00      	nop
 8001490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001492:	bc08      	pop	{r3}
 8001494:	469e      	mov	lr, r3
 8001496:	4770      	bx	lr
